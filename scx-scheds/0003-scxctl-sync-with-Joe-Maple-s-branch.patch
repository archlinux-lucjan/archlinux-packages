From ebb0f7a1f3fa42e7b7a9dc17b8bd0e29285567bb Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Tue, 2 Sep 2025 09:01:55 +0200
Subject: [PATCH 3/3] scxctl: sync with Joe Maple's branch

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 Cargo.lock               |   1 +
 tools/scxctl/Cargo.toml  |   1 +
 tools/scxctl/src/main.rs | 180 +++++++++++++++++++++++++--------------
 3 files changed, 117 insertions(+), 65 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 593caf16..c0635a9d 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -3077,6 +3077,7 @@ dependencies = [
 name = "scxctl"
 version = "1.0.15"
 dependencies = [
+ "anyhow",
  "clap",
  "colored 3.0.0",
  "scx_loader",
diff --git a/tools/scxctl/Cargo.toml b/tools/scxctl/Cargo.toml
index 856775ca..ed3e0e7e 100644
--- a/tools/scxctl/Cargo.toml
+++ b/tools/scxctl/Cargo.toml
@@ -18,3 +18,4 @@ clap = { version = "4.5.28", features = ["derive"] }
 colored = "3.0.0"
 zbus = "5.3.1"
 scx_loader = { path = "../../tools/scx_loader", version="1.0.15" }
+anyhow = "1.0"
diff --git a/tools/scxctl/src/main.rs b/tools/scxctl/src/main.rs
index a2c2b07b..f513dfff 100644
--- a/tools/scxctl/src/main.rs
+++ b/tools/scxctl/src/main.rs
@@ -1,5 +1,6 @@
 mod cli;
 
+use anyhow::Context;
 use clap::Parser;
 use cli::{Cli, Commands};
 use colored::Colorize;
@@ -7,7 +8,7 @@ use scx_loader::{dbus::LoaderClientProxyBlocking, SchedMode, SupportedSched};
 use std::process::exit;
 use zbus::blocking::Connection;
 
-fn cmd_get(scx_loader: LoaderClientProxyBlocking) -> Result<(), Box<dyn std::error::Error>> {
+fn cmd_get(scx_loader: LoaderClientProxyBlocking) -> anyhow::Result<()> {
     let current_scheduler: String = scx_loader.current_scheduler()?;
 
     match current_scheduler.as_str() {
@@ -30,14 +31,15 @@ fn cmd_get(scx_loader: LoaderClientProxyBlocking) -> Result<(), Box<dyn std::err
     Ok(())
 }
 
-fn cmd_list(scx_loader: LoaderClientProxyBlocking) -> Result<(), Box<dyn std::error::Error>> {
+fn cmd_list(scx_loader: LoaderClientProxyBlocking) -> anyhow::Result<()> {
     match scx_loader.supported_schedulers() {
         Ok(sl) => {
-            let supported_scheds = sl
+            let sched_names = sl
                 .iter()
-                .map(|s| remove_scx_prefix(&s.to_string()))
-                .collect::<Vec<String>>();
-            println!("supported schedulers: {:?}", supported_scheds);
+                .map(|s| remove_scx_prefix(s))
+                .collect::<Vec<_>>()
+                .join(", ");
+            println!("supported schedulers: [{}]", sched_names);
             return Ok(());
         }
         Err(e) => {
@@ -52,31 +54,26 @@ fn cmd_start(
     sched_name: String,
     mode_name: Option<SchedMode>,
     args: Option<Vec<String>>,
-) -> Result<(), Box<dyn std::error::Error>> {
-    // Verify scx_loader is not running a scheduler
-    if scx_loader.current_scheduler().unwrap() != "unknown" {
-        println!(
-            "{} scx scheduler already running, use '{}' instead of '{}'",
-            "error:".red().bold(),
-            "switch".bold(),
-            "start".bold()
-        );
-        println!("\nFor more information, try '{}'", "--help".bold());
-        exit(1);
-    }
+) -> anyhow::Result<()> {
+    // Verify no scheduler is running
+    check_scheduler_state(&scx_loader, false)?;
 
-    let sched: SupportedSched = validate_sched(scx_loader.clone(), sched_name);
-    let mode: SchedMode = mode_name.unwrap_or(SchedMode::Auto);
-    match args {
+    let sched = validate_sched(scx_loader.clone(), sched_name)?;
+    let mode = mode_name.unwrap_or(SchedMode::Auto);
+
+    match &args {
         Some(args) => {
-            scx_loader.start_scheduler_with_args(sched.clone(), &args.clone())?;
-            println!("started {sched:?} with arguments \"{}\"", args.join(" "));
+            scx_loader.start_scheduler_with_args(sched.clone(), args)?;
         }
         None => {
             scx_loader.start_scheduler(sched.clone(), mode.clone())?;
-            println!("started {sched:?} in {mode:?} mode");
         }
     }
+
+    println!(
+        "{}",
+        format_scheduler_message("started", &sched, Some(&mode), args.as_ref())
+    );
     Ok(())
 }
 
@@ -85,56 +82,52 @@ fn cmd_switch(
     sched_name: Option<String>,
     mode_name: Option<SchedMode>,
     args: Option<Vec<String>>,
-) -> Result<(), Box<dyn std::error::Error>> {
-    // Verify scx_loader is running a scheduler
-    if scx_loader.current_scheduler().unwrap() == "unknown" {
-        println!(
-            "{} no scx scheduler running, use '{}' instead of '{}'",
-            "error:".red().bold(),
-            "start".bold(),
-            "switch".bold()
-        );
-        println!("\nFor more information, try '{}'", "--help".bold());
-        exit(1);
-    }
+) -> anyhow::Result<()> {
+    // Verify a scheduler is running
+    let current_scheduler = check_scheduler_state(&scx_loader, true)?;
 
-    let sched: SupportedSched = match sched_name {
-        Some(sched_name) => validate_sched(scx_loader.clone(), sched_name),
-        None => SupportedSched::try_from(scx_loader.current_scheduler().unwrap().as_str()).unwrap(),
+    let sched = match sched_name {
+        Some(name) => validate_sched(scx_loader.clone(), name)?,
+        None => SupportedSched::try_from(current_scheduler.as_str())
+            .context("Failed to parse current scheduler")?,
     };
-    let mode: SchedMode = match mode_name {
-        Some(mode_name) => mode_name,
-        None => scx_loader.scheduler_mode().unwrap(),
+
+    let mode = match mode_name {
+        Some(mode) => mode,
+        None => scx_loader
+            .scheduler_mode()
+            .context("Failed to get current scheduler mode")?,
     };
-    match args {
+
+    match &args {
         Some(args) => {
-            scx_loader.switch_scheduler_with_args(sched.clone(), &args.clone())?;
-            println!(
-                "switched to {sched:?} with arguments \"{}\"",
-                args.join(" ")
-            );
+            scx_loader.switch_scheduler_with_args(sched.clone(), args)?;
         }
         None => {
             scx_loader.switch_scheduler(sched.clone(), mode.clone())?;
-            println!("switched to {sched:?} in {mode:?} mode");
         }
     }
+
+    println!(
+        "{}",
+        format_scheduler_message("switched to", &sched, Some(&mode), args.as_ref())
+    );
     Ok(())
 }
 
-fn cmd_stop(scx_loader: LoaderClientProxyBlocking) -> Result<(), Box<dyn std::error::Error>> {
+fn cmd_stop(scx_loader: LoaderClientProxyBlocking) -> anyhow::Result<()> {
     scx_loader.stop_scheduler()?;
     println!("stopped");
     Ok(())
 }
 
-fn cmd_restart(scx_loader: LoaderClientProxyBlocking) -> Result<(), Box<dyn std::error::Error>> {
+fn cmd_restart(scx_loader: LoaderClientProxyBlocking) -> anyhow::Result<()> {
     scx_loader.restart_scheduler()?;
     println!("restarted");
     Ok(())
 }
 
-fn main() -> Result<(), Box<dyn std::error::Error>> {
+fn main() -> anyhow::Result<()> {
     let cli = Cli::parse();
     let conn = Connection::system()?;
     let scx_loader = LoaderClientProxyBlocking::new(&conn)?;
@@ -157,22 +150,78 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {
 
 const SCHED_PREFIX: &str = "scx_";
 
-fn ensure_scx_prefix(input: String) -> String {
-    if !input.starts_with(SCHED_PREFIX) {
-        return format!("{}{}", SCHED_PREFIX, input);
+fn check_scheduler_state(
+    scx_loader: &LoaderClientProxyBlocking,
+    expecting_running: bool,
+) -> anyhow::Result<String> {
+    let current_scheduler = scx_loader
+        .current_scheduler()
+        .context("Failed to get current scheduler status")?;
+
+    let is_running = current_scheduler != "unknown";
+
+    if expecting_running && !is_running {
+        println!(
+            "{} no scx scheduler running, use '{}' instead of '{}'",
+            "error:".red().bold(),
+            "start".bold(),
+            "switch".bold()
+        );
+        println!("\nFor more information, try '{}'", "--help".bold());
+        exit(1);
     }
+
+    if !expecting_running && is_running {
+        println!(
+            "{} scx scheduler already running, use '{}' instead of '{}'",
+            "error:".red().bold(),
+            "switch".bold(),
+            "start".bold()
+        );
+        println!("\nFor more information, try '{}'", "--help".bold());
+        exit(1);
+    }
+
+    Ok(current_scheduler)
+}
+
+fn format_scheduler_message(
+    action: &str,
+    sched: &SupportedSched,
+    mode: Option<&SchedMode>,
+    args: Option<&Vec<String>>,
+) -> String {
+    match args {
+        Some(args) => format!("{} {sched:?} with arguments \"{}\"", action, args.join(" ")),
+        None => {
+            let mode = mode.unwrap_or(&SchedMode::Auto);
+            format!("{} {sched:?} in {mode:?} mode", action)
+        }
+    }
+}
+
+fn ensure_scx_prefix(input: &str) -> String {
+    if input.starts_with(SCHED_PREFIX) {
+        input.to_string()
+    } else {
+        format!("{}{}", SCHED_PREFIX, input)
+    }
+}
+
+fn remove_scx_prefix(input: &str) -> String {
     input
+        .strip_prefix(SCHED_PREFIX)
+        .unwrap_or(input)
+        .to_string()
 }
 
-fn remove_scx_prefix(input: &String) -> String {
-    if let Some(strip_input) = input.strip_prefix(SCHED_PREFIX) {
-        return strip_input.to_string();
-    }
-    input.to_string()
-}
-
-fn validate_sched(scx_loader: LoaderClientProxyBlocking, sched: String) -> SupportedSched {
-    let raw_supported_scheds: Vec<String> = scx_loader.supported_schedulers().unwrap();
+fn validate_sched(
+    scx_loader: LoaderClientProxyBlocking,
+    sched: String,
+) -> anyhow::Result<SupportedSched> {
+    let raw_supported_scheds = scx_loader
+        .supported_schedulers()
+        .context("Failed to get supported schedulers list")?;
     let supported_scheds: Vec<String> = raw_supported_scheds
         .iter()
         .map(|s| remove_scx_prefix(s))
@@ -189,5 +238,6 @@ fn validate_sched(scx_loader: LoaderClientProxyBlocking, sched: String) -> Suppo
         exit(1);
     }
 
-    SupportedSched::try_from(ensure_scx_prefix(sched).as_str()).unwrap()
+    SupportedSched::try_from(ensure_scx_prefix(&sched).as_str())
+        .with_context(|| format!("Failed to parse scheduler '{}'", sched))
 }
-- 
2.51.0

