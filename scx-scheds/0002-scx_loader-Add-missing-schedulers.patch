From 7dfa1d8f09d12ee2049e3d62c5e233bf882e0783 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 10 Jul 2025 21:56:00 +0200
Subject: [PATCH 2/3] scx_loader: Add missing schedulers

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 rust/scx_loader/configuration.md | 29 ++++++++++++++++++++++++--
 rust/scx_loader/src/config.rs    | 35 ++++++++++++++++++++++++++++++++
 rust/scx_loader/src/lib.rs       | 12 +++++++++++
 rust/scx_loader/src/main.rs      |  3 +++
 4 files changed, 77 insertions(+), 2 deletions(-)

diff --git a/rust/scx_loader/configuration.md b/rust/scx_loader/configuration.md
index 6588ee88..61bf0e59 100644
--- a/rust/scx_loader/configuration.md
+++ b/rust/scx_loader/configuration.md
@@ -60,12 +60,30 @@ auto_mode = []
 gaming_mode = []
 lowlatency_mode = []
 powersave_mode = []
+
+[scheds.scx_wd40]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+
+[scheds.scx_mitosis]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+
+[scheds.scx_chaos]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = ["-y"]
+powersave_mode = []
 ```
 
 **`default_sched`:**
 
 * This field specifies the scheduler that will be started automatically when `scx_loader` starts (e.g., on boot).
-* It should be set to the name of a supported scheduler (e.g., `"scx_bpfland"`, `"scx_rusty"`, `"scx_lavd"`, `"scx_flash"`, `"scx_p2dq"`, `"scx_rustland"`).
+* It should be set to the name of a supported scheduler (e.g., `"scx_bpfland"`, `"scx_rusty"`, `"scx_lavd"`, `"scx_flash"`, `"scx_p2dq"`, `"scx_rustland"`, `"scx_wd40"`, `"scx_mitosis"`, `"scx_chaos"`).
 * If this field is not present or is set to an empty string, no scheduler will be started automatically.
 
 **`default_mode`:**
@@ -76,7 +94,7 @@ powersave_mode = []
 
 **`[scheds.scx_name]`:**
 
-* This section defines the custom flags for a specific scheduler. Replace `scx_name` with the actual name of the scheduler (e.g., `scx_bpfland`, `scx_rusty`, `scx_lavd`, `scx_flash`, `scx_p2dq`, `scx_rustland`).
+* This section defines the custom flags for a specific scheduler. Replace `scx_name` with the actual name of the scheduler (e.g., `scx_bpfland`, `scx_rusty`, `scx_lavd`, `scx_flash`, `scx_p2dq`, `scx_rustland`, `scx_wd40`, `scx_mitosis`, `scx_chaos`).
 
 **`auto_mode`, `gaming_mode`, `lowlatency_mode`, `powersave_mode`, `server_mode`:**
 
@@ -105,6 +123,13 @@ The example configuration above shows how to set custom flags for different sche
     * Server mode: `--keep-running`
 * For `scx_rustland`:
     * No custom flags are defined, so the default flags for each mode will be used.
+* For `scx_wd40`:
+    * No custom flags are defined, so the default flags for each mode will be used.
+* For `scx_mitosis`:
+    * No custom flags are defined, so the default flags for each mode will be used.
+* For `scx_chaos`:
+    * Low Latency mode: `-y`
+    * Server mode: `--keep-running`
 
 ## Fallback Behavior
 
diff --git a/rust/scx_loader/src/config.rs b/rust/scx_loader/src/config.rs
index 2f27ed99..e93158c8 100644
--- a/rust/scx_loader/src/config.rs
+++ b/rust/scx_loader/src/config.rs
@@ -81,6 +81,9 @@ pub fn get_default_config() -> Config {
         SupportedSched::P2DQ,
         SupportedSched::Tickless,
         SupportedSched::Rustland,
+        SupportedSched::WD40,
+        SupportedSched::Mitosis,
+        SupportedSched::Chaos,
     ];
     let scheds_map = HashMap::from(supported_scheds.map(|x| init_default_config_entry(x)));
     Config {
@@ -221,6 +224,17 @@ fn get_default_scx_flags_for_mode(scx_sched: &SupportedSched, sched_mode: SchedM
         },
         // scx_rustland doesn't support any of these modes
         SupportedSched::Rustland => vec![],
+        // scx_wd40 doesn't support any of these modes
+        SupportedSched::WD40 => vec![],
+        // scx_mitosis doesn't support any of these modes
+        SupportedSched::Mitosis => vec![],
+        SupportedSched::Chaos => match sched_mode {
+            SchedMode::Gaming => vec![],
+            SchedMode::LowLatency => vec!["-y"],
+            SchedMode::PowerSave => vec![],
+            SchedMode::Server => vec!["--keep-running"],
+            SchedMode::Auto => vec![],
+        },
     }
 }
 
@@ -290,6 +304,27 @@ gaming_mode = []
 lowlatency_mode = []
 powersave_mode = []
 server_mode = []
+
+[scheds.scx_wd40]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+server_mode = []
+
+[scheds.scx_mitosis]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+server_mode = []
+
+[scheds.scx_chaos]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = ["-y"]
+powersave_mode = []
+server_mode = ["--keep-running"]
 "#;
 
         let parsed_config = parse_config_content(config_str).expect("Failed to parse config");
diff --git a/rust/scx_loader/src/lib.rs b/rust/scx_loader/src/lib.rs
index 9e0911ab..4fd8c07b 100644
--- a/rust/scx_loader/src/lib.rs
+++ b/rust/scx_loader/src/lib.rs
@@ -34,6 +34,12 @@ pub enum SupportedSched {
     Tickless,
     #[serde(rename = "scx_rustland")]
     Rustland,
+    #[serde(rename = "scx_wd40")]
+    WD40,
+    #[serde(rename = "scx_mitosis")]
+    Mitosis,
+    #[serde(rename = "scx_chaos")]
+    Chaos,
 }
 
 impl FromStr for SupportedSched {
@@ -42,12 +48,15 @@ impl FromStr for SupportedSched {
     fn from_str(scx_name: &str) -> anyhow::Result<SupportedSched> {
         match scx_name {
             "scx_bpfland" => Ok(SupportedSched::Bpfland),
+            "scx_chaos" => Ok(SupportedSched::Chaos),
             "scx_flash" => Ok(SupportedSched::Flash),
             "scx_lavd" => Ok(SupportedSched::Lavd),
+            "scx_mitosis" => Ok(SupportedSched::Mitosis),
             "scx_p2dq" => Ok(SupportedSched::P2DQ),
             "scx_tickless" => Ok(SupportedSched::Tickless),
             "scx_rustland" => Ok(SupportedSched::Rustland),
             "scx_rusty" => Ok(SupportedSched::Rusty),
+            "scx_wd40" => Ok(SupportedSched::WD40),
             _ => Err(anyhow::anyhow!("{scx_name} is not supported")),
         }
     }
@@ -64,12 +73,15 @@ impl From<SupportedSched> for &str {
     fn from(scx_name: SupportedSched) -> Self {
         match scx_name {
             SupportedSched::Bpfland => "scx_bpfland",
+            SupportedSched::Chaos => "scx_chaos",
             SupportedSched::Flash => "scx_flash",
             SupportedSched::Lavd => "scx_lavd",
+            SupportedSched::Mitosis => "scx_mitosis",
             SupportedSched::P2DQ => "scx_p2dq",
             SupportedSched::Tickless => "scx_tickless",
             SupportedSched::Rustland => "scx_rustland",
             SupportedSched::Rusty => "scx_rusty",
+            SupportedSched::WD40 => "scx_wd40",
         }
     }
 }
diff --git a/rust/scx_loader/src/main.rs b/rust/scx_loader/src/main.rs
index f2ca9935..346ca750 100644
--- a/rust/scx_loader/src/main.rs
+++ b/rust/scx_loader/src/main.rs
@@ -90,12 +90,15 @@ impl ScxLoader {
     async fn supported_schedulers(&self) -> Vec<&str> {
         vec![
             "scx_bpfland",
+            "scx_chaos",
             "scx_flash",
             "scx_lavd",
+            "scx_mitosis",
             "scx_p2dq",
             "scx_tickless",
             "scx_rustland",
             "scx_rusty",
+            "scx_wd40",
         ]
     }
 
-- 
2.50.0

