From 3f6a99c876614d6592f0f8a050f493b4ff763835 Mon Sep 17 00:00:00 2001
From: Vladislav Nepogodin <nepogodin.vlad@gmail.com>
Date: Fri, 4 Jul 2025 21:58:48 +0400
Subject: [PATCH 1/3] scx_loader: refactor hardcoded scheduler names

Use predefined type conversion from SupportedSched into &str, instead of
relying on hardcoded values
---
 rust/scx_loader/src/config.rs | 50 ++++++++++++++---------------------
 1 file changed, 20 insertions(+), 30 deletions(-)

diff --git a/rust/scx_loader/src/config.rs b/rust/scx_loader/src/config.rs
index 17afc196..6286c78c 100644
--- a/rust/scx_loader/src/config.rs
+++ b/rust/scx_loader/src/config.rs
@@ -73,39 +73,20 @@ fn parse_config_content(file_content: &str) -> Result<Config> {
 }
 
 pub fn get_default_config() -> Config {
+    let supported_scheds = [
+        SupportedSched::Bpfland,
+        SupportedSched::Rusty,
+        SupportedSched::Lavd,
+        SupportedSched::Flash,
+        SupportedSched::P2DQ,
+        SupportedSched::Tickless,
+        SupportedSched::Rustland,
+    ];
+    let scheds_map = HashMap::from(supported_scheds.map(|x| init_default_config_entry(x)));
     Config {
         default_sched: None,
         default_mode: Some(SchedMode::Auto),
-        scheds: HashMap::from([
-            (
-                "scx_bpfland".to_string(),
-                get_default_sched_for_config(&SupportedSched::Bpfland),
-            ),
-            (
-                "scx_rusty".to_string(),
-                get_default_sched_for_config(&SupportedSched::Rusty),
-            ),
-            (
-                "scx_lavd".to_string(),
-                get_default_sched_for_config(&SupportedSched::Lavd),
-            ),
-            (
-                "scx_flash".to_string(),
-                get_default_sched_for_config(&SupportedSched::Flash),
-            ),
-            (
-                "scx_p2dq".to_string(),
-                get_default_sched_for_config(&SupportedSched::P2DQ),
-            ),
-            (
-                "scx_tickless".to_string(),
-                get_default_sched_for_config(&SupportedSched::Tickless),
-            ),
-            (
-                "scx_rustland".to_string(),
-                get_default_sched_for_config(&SupportedSched::Rustland),
-            ),
-        ]),
+        scheds: scheds_map,
     }
 }
 
@@ -232,6 +213,15 @@ fn get_default_scx_flags_for_mode(scx_sched: &SupportedSched, sched_mode: SchedM
     }
 }
 
+/// Initializes entry for config sched map
+fn init_default_config_entry(scx_sched: SupportedSched) -> (String, Sched) {
+    let default_modes = get_default_sched_for_config(&scx_sched);
+    (
+        <SupportedSched as Into<&str>>::into(scx_sched).to_owned(),
+        default_modes,
+    )
+}
+
 #[cfg(test)]
 mod tests {
     use crate::config::*;
-- 
2.50.0

