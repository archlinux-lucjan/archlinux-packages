From fef9c324f0258d643fb03b12443b748ca0b49c8f Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 25 Jul 2025 15:51:29 +0200
Subject: [PATCH 13/13] scx_loader: Add missing schedulers

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 tools/scx_loader/configuration.md | 122 ++++++++++++++++++++----------
 tools/scx_loader/src/config.rs    |  35 +++++++++
 tools/scx_loader/src/lib.rs       |  12 +++
 tools/scx_loader/src/main.rs      |   3 +
 4 files changed, 133 insertions(+), 39 deletions(-)

diff --git a/tools/scx_loader/configuration.md b/tools/scx_loader/configuration.md
index 5d03a972..b1fec754 100644
--- a/tools/scx_loader/configuration.md
+++ b/tools/scx_loader/configuration.md
@@ -18,50 +18,78 @@ If no configuration file is found at any of these paths, `scx_loader` will use t
 The configuration file has the following structure:
 
 ```toml
-default_sched = "scx_bpfland"
+default_sched = "scx_flash"
 default_mode = "Auto"
 
-[scheds.scx_bpfland]
-auto_mode = []
-gaming_mode = ["-m", "performance"]
-lowlatency_mode = ["-s", "5000", "-S", "500", "-l", "5000", "-m", "performance"]
-powersave_mode = ["-m", "powersave"]
-
-[scheds.scx_rusty]
-auto_mode = []
-gaming_mode = []
-lowlatency_mode = []
-powersave_mode = []
-
-[scheds.scx_lavd]
-auto_mode = []
-gaming_mode = ["--performance"]
-lowlatency_mode = ["--performance"]
-powersave_mode = ["--powersave"]
-
-[scheds.scx_flash]
-auto_mode = []
-gaming_mode = ["-m", "all", "-w", "-p"]
-lowlatency_mode = ["-m", "performance", "-w", "-p", "-C", "0"]
-powersave_mode = ["-m", "powersave", "-I", "10000", "-t", "10000", "-s", "10000", "-S", "1000"]
-
-[scheds.scx_p2dq]
-auto_mode = []
-gaming_mode = []
-lowlatency_mode = ["-y"]
-powersave_mode = []
-
-[scheds.scx_tickless]
-auto_mode = []
-gaming_mode = ["-f 5000 -s 5000"]
-lowlatency_mode = ["-f 5000 -s 1000"]
-powersave_mode = ["-f 50 -p"]
-
 [scheds.scx_rustland]
 auto_mode = []
 gaming_mode = []
 lowlatency_mode = []
 powersave_mode = []
+server_mode = []
+
+[scheds.scx_lavd]
+auto_mode = []
+gaming_mode = ["--performance"]
+lowlatency_mode = ["--performance"]
+powersave_mode = ["--powersave"]
+server_mode = []
+
+[scheds.scx_flash]
+auto_mode = []
+gaming_mode = ["-m", "all"]
+lowlatency_mode = ["-m", "performance", "-w", "-C", "0"]
+powersave_mode = ["-m", "powersave", "-I", "10000", "-t", "10000", "-s", "10000", "-S", "1000"]
+server_mode = ["-m", "all", "-s", "20000", "-S", "1000", "-I", "-1", "-D", "-L"]
+
+[scheds.scx_p2dq]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = ["-y"]
+powersave_mode = []
+server_mode = ["--keep-running"]
+
+[scheds.scx_rusty]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+server_mode = []
+
+[scheds.scx_bpfland]
+auto_mode = []
+gaming_mode = ["-m", "performance"]
+lowlatency_mode = ["-s", "5000", "-S", "500", "-l", "5000", "-m", "performance"]
+powersave_mode = ["-m", "powersave"]
+server_mode = ["-p"]
+
+[scheds.scx_tickless]
+auto_mode = []
+gaming_mode = ["-f", "5000", "-s", "5000"]
+lowlatency_mode = ["-f", "5000", "-s", "1000"]
+powersave_mode = ["-f", "50", "-p"]
+server_mode = ["-f", "100"]
+
+[scheds.scx_wd40]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+server_mode = []
+
+[scheds.scx_mitosis]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+server_mode = []
+
+[scheds.scx_chaos]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = ["-y"]
+powersave_mode = []
+server_mode = ["--keep-running"]
 ```
 
 **`default_sched`:**
@@ -92,8 +120,9 @@ The example configuration above shows how to set custom flags for different sche
 
 * For `scx_bpfland`:
     * Gaming mode: `-m performance`
-    * Low Latency mode: `-s 5000 -S 500 -l 5000`
+    * Low Latency mode: `-s 5000 -S 500 -l 5000 -m performance`
     * Power Save mode: `-m powersave`
+    * Server mode: `-p`
 * For `scx_rusty`:
     * No custom flags are defined, so the default flags for each mode will be used.
 * For `scx_lavd`:
@@ -101,12 +130,27 @@ The example configuration above shows how to set custom flags for different sche
     * Low Latency mode: `--performance`
     * Power Save mode: `--powersave`
 * For `scx_flash`:
-    * No custom flags are defined, so the default flags for each mode will be used.
+    * Gaming mode: `-m all`
+    * Low Latency mode: `-m performance -w -C 0`
+    * Power Save mode: `-m powersave -I 10000 -t 10000 -s 10000 -S 1000`
+    * Server mode: `-m all -s 20000 -S 1000 -I -1 -D -L`
+* For `scx_tickless`:
+    * Gaming mode: `-f 5000 -s 5000`
+    * Low Latency mode: `-f 5000 -s 1000`
+    * Power Save mode: `-f 50 -p`
+    * Server mode: `-f 100`
 * For `scx_p2dq`:
     * Low Latency mode: `-y`
     * Server mode: `--keep-running`
 * For `scx_rustland`:
     * No custom flags are defined, so the default flags for each mode will be used.
+* For `scx_wd40`:
+    * No custom flags are defined, so the default flags for each mode will be used.
+* For `scx_mitosis`:
+    * No custom flags are defined, so the default flags for each mode will be used.
+* For `scx_chaos`:
+    * Low Latency mode: `-y`
+    * Server mode: `--keep-running`
 
 ## Fallback Behavior
 
diff --git a/tools/scx_loader/src/config.rs b/tools/scx_loader/src/config.rs
index d082bf67..e150ab5b 100644
--- a/tools/scx_loader/src/config.rs
+++ b/tools/scx_loader/src/config.rs
@@ -86,6 +86,9 @@ pub fn get_default_config() -> Config {
         SupportedSched::P2DQ,
         SupportedSched::Tickless,
         SupportedSched::Rustland,
+        SupportedSched::WD40,
+        SupportedSched::Mitosis,
+        SupportedSched::Chaos,
     ];
     let scheds_map = HashMap::from(supported_scheds.map(|x| init_default_config_entry(x)));
     Config {
@@ -226,6 +229,17 @@ fn get_default_scx_flags_for_mode(scx_sched: &SupportedSched, sched_mode: SchedM
         },
         // scx_rustland doesn't support any of these modes
         SupportedSched::Rustland => vec![],
+        // scx_wd40 doesn't support any of these modes
+        SupportedSched::WD40 => vec![],
+        // scx_mitosis doesn't support any of these modes
+        SupportedSched::Mitosis => vec![],
+        SupportedSched::Chaos => match sched_mode {
+            SchedMode::Gaming => vec![],
+            SchedMode::LowLatency => vec!["-y"],
+            SchedMode::PowerSave => vec![],
+            SchedMode::Server => vec!["--keep-running"],
+            SchedMode::Auto => vec![],
+        },
     }
 }
 
@@ -295,6 +309,27 @@ gaming_mode = []
 lowlatency_mode = []
 powersave_mode = []
 server_mode = []
+
+[scheds.scx_wd40]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+server_mode = []
+
+[scheds.scx_mitosis]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = []
+powersave_mode = []
+server_mode = []
+
+[scheds.scx_chaos]
+auto_mode = []
+gaming_mode = []
+lowlatency_mode = ["-y"]
+powersave_mode = []
+server_mode = ["--keep-running"]
 "#;
 
         let parsed_config = parse_config_content(config_str).expect("Failed to parse config");
diff --git a/tools/scx_loader/src/lib.rs b/tools/scx_loader/src/lib.rs
index 9e0911ab..4fd8c07b 100644
--- a/tools/scx_loader/src/lib.rs
+++ b/tools/scx_loader/src/lib.rs
@@ -34,6 +34,12 @@ pub enum SupportedSched {
     Tickless,
     #[serde(rename = "scx_rustland")]
     Rustland,
+    #[serde(rename = "scx_wd40")]
+    WD40,
+    #[serde(rename = "scx_mitosis")]
+    Mitosis,
+    #[serde(rename = "scx_chaos")]
+    Chaos,
 }
 
 impl FromStr for SupportedSched {
@@ -42,12 +48,15 @@ impl FromStr for SupportedSched {
     fn from_str(scx_name: &str) -> anyhow::Result<SupportedSched> {
         match scx_name {
             "scx_bpfland" => Ok(SupportedSched::Bpfland),
+            "scx_chaos" => Ok(SupportedSched::Chaos),
             "scx_flash" => Ok(SupportedSched::Flash),
             "scx_lavd" => Ok(SupportedSched::Lavd),
+            "scx_mitosis" => Ok(SupportedSched::Mitosis),
             "scx_p2dq" => Ok(SupportedSched::P2DQ),
             "scx_tickless" => Ok(SupportedSched::Tickless),
             "scx_rustland" => Ok(SupportedSched::Rustland),
             "scx_rusty" => Ok(SupportedSched::Rusty),
+            "scx_wd40" => Ok(SupportedSched::WD40),
             _ => Err(anyhow::anyhow!("{scx_name} is not supported")),
         }
     }
@@ -64,12 +73,15 @@ impl From<SupportedSched> for &str {
     fn from(scx_name: SupportedSched) -> Self {
         match scx_name {
             SupportedSched::Bpfland => "scx_bpfland",
+            SupportedSched::Chaos => "scx_chaos",
             SupportedSched::Flash => "scx_flash",
             SupportedSched::Lavd => "scx_lavd",
+            SupportedSched::Mitosis => "scx_mitosis",
             SupportedSched::P2DQ => "scx_p2dq",
             SupportedSched::Tickless => "scx_tickless",
             SupportedSched::Rustland => "scx_rustland",
             SupportedSched::Rusty => "scx_rusty",
+            SupportedSched::WD40 => "scx_wd40",
         }
     }
 }
diff --git a/tools/scx_loader/src/main.rs b/tools/scx_loader/src/main.rs
index e9878e20..d6bc67e3 100644
--- a/tools/scx_loader/src/main.rs
+++ b/tools/scx_loader/src/main.rs
@@ -101,12 +101,15 @@ impl ScxLoader {
     async fn supported_schedulers(&self) -> Vec<&str> {
         vec![
             "scx_bpfland",
+            "scx_chaos",
             "scx_flash",
             "scx_lavd",
+            "scx_mitosis",
             "scx_p2dq",
             "scx_tickless",
             "scx_rustland",
             "scx_rusty",
+            "scx_wd40",
         ]
     }
     async fn start_scheduler(
-- 
2.50.1

