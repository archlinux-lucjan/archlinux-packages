From 3eec6275b6e859303e6c29099f92a1a349bbcbc5 Mon Sep 17 00:00:00 2001
From: Hugo Osvaldo Barrera <hugo@barrera.io>
Date: Sun, 29 Aug 2021 18:55:30 +0200
Subject: [PATCH 01/12] Merge mkinitcpio libalpm scripts into one

Fixes #10

Signed-off-by: Hugo Osvaldo Barrera <hugo@barrera.io>
---
 Makefile                                 |  3 +-
 libalpm/hooks/60-mkinitcpio-remove.hook  |  2 +-
 libalpm/hooks/90-mkinitcpio-install.hook |  2 +-
 libalpm/scripts/mkinitcpio               | 99 ++++++++++++++++++++++++
 libalpm/scripts/mkinitcpio-install       | 44 -----------
 libalpm/scripts/mkinitcpio-remove        | 61 ---------------
 6 files changed, 102 insertions(+), 109 deletions(-)
 create mode 100644 libalpm/scripts/mkinitcpio
 delete mode 100644 libalpm/scripts/mkinitcpio-install
 delete mode 100644 libalpm/scripts/mkinitcpio-remove

diff --git a/Makefile b/Makefile
index 9ef0f6a..e6f3789 100644
--- a/Makefile
+++ b/Makefile
@@ -73,9 +73,8 @@ install: all
 	install -m644 shell/zsh-completion $(DESTDIR)/usr/share/zsh/site-functions/_mkinitcpio
 
 	install -m644 libalpm/hooks/90-mkinitcpio-install.hook $(DESTDIR)/usr/share/libalpm/hooks/90-mkinitcpio-install.hook
-	install -m755 libalpm/scripts/mkinitcpio-install $(DESTDIR)/usr/share/libalpm/scripts/mkinitcpio-install
 	install -m644 libalpm/hooks/60-mkinitcpio-remove.hook $(DESTDIR)/usr/share/libalpm/hooks/60-mkinitcpio-remove.hook
-	install -m755 libalpm/scripts/mkinitcpio-remove $(DESTDIR)/usr/share/libalpm/scripts/mkinitcpio-remove
+	install -m755 libalpm/scripts/mkinitcpio $(DESTDIR)/usr/share/libalpm/scripts/mkinitcpio
 
 doc: $(MANPAGES)
 man/%: man/%.txt Makefile
diff --git a/libalpm/hooks/60-mkinitcpio-remove.hook b/libalpm/hooks/60-mkinitcpio-remove.hook
index 9827afc..9600ce1 100644
--- a/libalpm/hooks/60-mkinitcpio-remove.hook
+++ b/libalpm/hooks/60-mkinitcpio-remove.hook
@@ -12,5 +12,5 @@ Target = mkinitcpio-git
 [Action]
 Description = Removing linux initcpios...
 When = PreTransaction
-Exec = /usr/share/libalpm/scripts/mkinitcpio-remove
+Exec = /usr/share/libalpm/scripts/mkinitcpio remove
 NeedsTargets
diff --git a/libalpm/hooks/90-mkinitcpio-install.hook b/libalpm/hooks/90-mkinitcpio-install.hook
index cf480bd..5b02fb8 100644
--- a/libalpm/hooks/90-mkinitcpio-install.hook
+++ b/libalpm/hooks/90-mkinitcpio-install.hook
@@ -8,5 +8,5 @@ Target = usr/lib/initcpio/*
 [Action]
 Description = Updating linux initcpios...
 When = PostTransaction
-Exec = /usr/share/libalpm/scripts/mkinitcpio-install
+Exec = /usr/share/libalpm/scripts/mkinitcpio install
 NeedsTargets
diff --git a/libalpm/scripts/mkinitcpio b/libalpm/scripts/mkinitcpio
new file mode 100644
index 0000000..5e31f96
--- /dev/null
+++ b/libalpm/scripts/mkinitcpio
@@ -0,0 +1,99 @@
+#!/bin/bash -e
+
+args=()
+package=0
+
+process_preset() {
+    if [[ -n "${pkgbase}" && -e $preset ]]; then
+        if ! cmp $preset > /dev/null 2>&1 <(sed "s|%PKGBASE%|${pkgbase}|g" /usr/share/mkinitcpio/hook.preset); then
+            if [[ ! -e $preset.pacsave ]]; then
+                # save the preset as pacsave
+                mv $preset $preset.pacsave && return 0
+            fi
+        else
+            # remove the preset
+            rm $preset && return 0
+        fi
+    fi
+}
+
+install_kernel() {
+    preset="/etc/mkinitcpio.d/${1}.preset"
+    if [[ ! -e $preset ]]; then
+        if [[ -e $preset.pacsave ]]; then
+            # move the pacsave to the template
+            mv "${preset}.pacsave" "$preset"
+        else
+            # create the preset from the template
+            sed "s|%PKGBASE%|${1}|g" /usr/share/mkinitcpio/hook.preset \
+                | install -Dm644 /dev/stdin "$preset"
+        fi
+    fi
+
+    # always install the kernel
+    install -Dm644 "${line}" "/boot/vmlinuz-${1}"
+
+    # compound args for each kernel
+    args+=(-p "${1}")
+}
+
+remove_kernel() {
+    # remove the actual kernel and images for the package being removed
+    kernel="/boot/vmlinuz-${1}"
+    preset="/etc/mkinitcpio.d/${1}.preset"
+    initramfs="/boot/initramfs-${1}.img"
+    fallback_initramfs="/boot/initramfs-${1}-fallback.img"
+    if [[ -e $kernel ]]; then
+        # remove the installed kernel
+        rm $kernel
+    fi
+
+    process_preset "${1}" $preset
+
+    if [[ -e $initramfs ]]; then
+        # remove the main image
+        rm $initramfs
+    fi
+    if [[ -e $fallback_initramfs ]]; then
+        # remove the fallback image
+        rm $fallback_initramfs
+    fi
+}
+
+while read -r line; do
+    if [[ $line != */vmlinuz ]]; then
+        # triggers when it's a change to usr/lib/initcpio/*
+        package=1
+        continue
+    fi
+
+    if ! read -r pkgbase > /dev/null 2>&1 < "${line%/vmlinuz}/pkgbase"; then
+        # if the kernel has no pkgbase, we skip it
+        continue
+    fi
+
+    if [ "$1" = "install" ]; then
+      install_kernel "$pkgbase"
+    elif [ "$1" = "remove" ]; then
+      remove_kernel "$pkgbase"
+    fi
+done
+
+if (( package )) && compgen -G /etc/mkinitcpio.d/"*.preset" > /dev/null; then
+    if [ "$1" = "install" ]; then
+      # change to use all presets
+      args=(-P)
+    elif [ "$1" = "remove" ]; then
+      shopt -s nullglob
+      for preset in /etc/mkinitcpio.d/*.preset; do
+          pkgbase=${preset##*/}
+          pkgbase=${pkgbase%.preset}
+          process_preset "${pkgbase}" "$preset"
+      done
+      shopt -u nullglob
+    fi
+fi
+
+if [ "$1" = "install" ] && (( ${#args[@]} )); then
+    mkinitcpio "${args[@]}"
+fi
diff --git a/libalpm/scripts/mkinitcpio-install b/libalpm/scripts/mkinitcpio-install
deleted file mode 100644
index d2e5041..0000000
--- a/libalpm/scripts/mkinitcpio-install
+++ /dev/null
@@ -1,44 +0,0 @@
-#!/bin/bash -e
-
-args=()
-all=0
-
-while read -r line; do
-    if [[ $line != */vmlinuz ]]; then
-        # triggers when it's a change to usr/lib/initcpio/*
-        all=1
-        continue
-    fi
-
-    if ! read -r pkgbase > /dev/null 2>&1 < "${line%/vmlinuz}/pkgbase"; then
-        # if the kernel has no pkgbase, we skip it
-        continue
-    fi
-
-    preset="/etc/mkinitcpio.d/${pkgbase}.preset"
-    if [[ ! -e $preset ]]; then
-        if [[ -e $preset.pacsave ]]; then
-            # move the pacsave to the template
-            mv "${preset}.pacsave" "$preset"
-        else
-            # create the preset from the template
-            sed "s|%PKGBASE%|${pkgbase}|g" /usr/share/mkinitcpio/hook.preset \
-                | install -Dm644 /dev/stdin "$preset"
-        fi
-    fi
-
-    # always install the kernel
-    install -Dm644 "${line}" "/boot/vmlinuz-${pkgbase}"
-
-    # compound args for each kernel
-    args+=(-p "${pkgbase}")
-done
-
-if (( all )) && compgen -G /etc/mkinitcpio.d/"*.preset" > /dev/null; then
-    # change to use all presets
-    args=(-P)
-fi
-
-if (( ${#args[@]} )); then
-    mkinitcpio "${args[@]}"
-fi
diff --git a/libalpm/scripts/mkinitcpio-remove b/libalpm/scripts/mkinitcpio-remove
deleted file mode 100644
index 17b4b31..0000000
--- a/libalpm/scripts/mkinitcpio-remove
+++ /dev/null
@@ -1,61 +0,0 @@
-#!/bin/bash -e
-
-package=0
-
-process_preset() {
-    if [[ -n "${pkgbase}" && -e $preset ]]; then
-        if ! cmp $preset > /dev/null 2>&1 <(sed "s|%PKGBASE%|${pkgbase}|g" /usr/share/mkinitcpio/hook.preset); then
-            if [[ ! -e $preset.pacsave ]]; then
-                # save the preset as pacsave
-                mv $preset $preset.pacsave && return 0
-            fi
-        else
-            # remove the preset
-            rm $preset && return 0
-        fi
-    fi
-}
-
-while read -r line; do
-    if [[ $line != */vmlinuz ]]; then
-        # triggers when it's a change to usr/lib/initcpio/*
-        package=1
-        continue
-    fi
-
-    if ! read -r pkgbase > /dev/null 2>&1 < "${line%/vmlinuz}/pkgbase"; then
-        # if the kernel has no pkgbase, we skip it
-        continue
-    fi
-
-    # remove the actual kernel and images for the package being removed
-    kernel="/boot/vmlinuz-${pkgbase}"
-    preset="/etc/mkinitcpio.d/${pkgbase}.preset"
-    initramfs="/boot/initramfs-${pkgbase}.img"
-    fallback_initramfs="/boot/initramfs-${pkgbase}-fallback.img"
-    if [[ -e $kernel ]]; then
-        # remove the installed kernel
-        rm $kernel
-    fi
-
-    process_preset "${pkgbase}" $preset
-
-    if [[ -e $initramfs ]]; then
-        # remove the main image
-        rm $initramfs
-    fi
-    if [[ -e $fallback_initramfs ]]; then
-        # remove the fallback image
-        rm $fallback_initramfs
-    fi
-done
-
-if (( package )) && compgen -G /etc/mkinitcpio.d/"*.preset" > /dev/null; then
-    shopt -s nullglob
-    for preset in /etc/mkinitcpio.d/*.preset; do
-        pkgbase=${preset##*/}
-        pkgbase=${pkgbase%.preset}
-        process_preset "${pkgbase}" $preset
-    done
-    shopt -u nullglob
-fi
-- 
2.37.1.377.g679aad9e82


From 69acb1703a064265dbde58a8e68d64830ecb62c9 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tpowa@archlinux.org>
Date: Fri, 11 Mar 2022 15:01:22 +0100
Subject: [PATCH 02/12] add zst compressed firmware support fpr future kernel
 versions

---
 functions | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/functions b/functions
index 48cfd7a..92bdced 100644
--- a/functions
+++ b/functions
@@ -376,6 +376,9 @@ add_firmware() {
             elif [[ -f $fwpath/$fw ]]; then
                 add_file "$fwpath/$fw" "$fwpath/$fw" 644 && r=0
                 break
+            elif [[ -f $fwpath/$fw.zst ]]; then
+                add_file "$fwpath/$fw.zst" "$fwpath/$fw.zst" 644 && r=0
+                break
             fi
         done
     done
-- 
2.37.1.377.g679aad9e82


From 2f74cd8bb4eb1ac7aaa0e06f56c39f7dbfea7a32 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tpowa@archlinux.org>
Date: Fri, 11 Mar 2022 15:47:59 +0100
Subject: [PATCH 03/12] add real symlink support

---
 functions | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/functions b/functions
index 92bdced..803487f 100644
--- a/functions
+++ b/functions
@@ -574,7 +574,15 @@ add_file() {
     else
         quiet "adding file: %s" "$dest"
     fi
-    command install -Dm$mode "$src" "$BUILDROOT$dest"
+   #check if $src is a symlink
+    if [[ -L $src ]]; then
+        # add the symlink
+        add_file "$(realpath $src)"
+        # create the symlink
+        add_symlink "$src" "$(realpath $src)"
+    else
+       command install -Dm$mode "$src" "$BUILDROOT$dest"
+    fi
 }
 
 add_runscript() {
-- 
2.37.1.377.g679aad9e82


From 6a03e363e97250c44e47779da83cdacbd7a390c7 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tpowa@archlinux.org>
Date: Fri, 11 Mar 2022 15:53:09 +0100
Subject: [PATCH 04/12] add real symlink support

---
 functions | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/functions b/functions
index 803487f..8a3f43a 100644
--- a/functions
+++ b/functions
@@ -642,7 +642,15 @@ add_binary() {
     mode=$(stat -c %a "$binary")
 
     # always add the binary itself
-    add_file "$binary" "$dest" "$mode"
+    # check if binary is a symlink
+    if [[ -L $binary ]]; then
+        # add the binary
+        add_file "$(realpath $binary)"
+        # create the symlink
+        add_symlink "$binary" "$(realpath $binary)"
+    else
+        add_file "$binary" "$dest" "$mode"
+    fi
 
     # negate this so that the RETURN trap is not fired on non-binaries
     ! lddout=$(ldd "$binary" 2>/dev/null) && return 0
-- 
2.37.1.377.g679aad9e82


From 012d07d112f2a22b267e0b6327a93d40e49837fb Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tpowa@archlinux.org>
Date: Fri, 11 Mar 2022 15:59:45 +0100
Subject: [PATCH 05/12] add MODULES_DECOMPRESS switch

---
 functions                 | 32 +++++++++++++++++---------------
 man/mkinitcpio.conf.5.txt |  8 +++++++-
 mkinitcpio                |  2 ++
 mkinitcpio.conf           |  6 ++++++
 4 files changed, 32 insertions(+), 16 deletions(-)

diff --git a/functions b/functions
index 8a3f43a..cf9b991 100644
--- a/functions
+++ b/functions
@@ -865,7 +865,7 @@ try_enable_color() {
 
 install_modules() {
     local m moduledest=$BUILDROOT/lib/modules/$KERNELVERSION
-    local -a xz_comp gz_comp zst_comp
+    MODULES_DECOMPRESS="yes" && local -a xz_comp gz_comp zst_comp
 
     [[ $KERNELVERSION == none ]] && return 0
 
@@ -876,20 +876,22 @@ install_modules() {
 
     cp "$@" "$moduledest/kernel"
 
-    # unzip modules prior to recompression
-    for m in "$@"; do
-        case $m in
-            *.xz)
-                xz_comp+=("$moduledest/kernel/${m##*/}")
-                ;;
-            *.gz)
-                gz_comp+=("$moduledest/kernel/${m##*/}")
-                ;;
-            *.zst)
-                zst_comp+=("$moduledest/kernel/${m##*/}")
-                ;;
-        esac
-    done
+    if [[ $MODULES_DECOMPRESS == yes ]]; then
+        # unzip modules prior to recompression
+        for m in "$@"; do
+            case $m in
+                *.xz)
+                    xz_comp+=("$moduledest/kernel/${m##*/}")
+                    ;;
+                *.gz)
+                    gz_comp+=("$moduledest/kernel/${m##*/}")
+                    ;;
+                *.zst)
+                    zst_comp+=("$moduledest/kernel/${m##*/}")
+                    ;;
+            esac
+        done
+    fi
     (( ${#xz_comp[*]} )) && xz -d "${xz_comp[@]}"
     (( ${#gz_comp[*]} )) && gzip -d "${gz_comp[@]}"
     (( ${#zst_comp[*]} )) && zstd -d --rm -q "${zst_comp[@]}"
diff --git a/man/mkinitcpio.conf.5.txt b/man/mkinitcpio.conf.5.txt
index 0383360..fdb8d91 100644
--- a/man/mkinitcpio.conf.5.txt
+++ b/man/mkinitcpio.conf.5.txt
@@ -69,6 +69,12 @@ despite being "valid".
 	program. This option is generally not used. It can be potentially dangerous
 	and may cause invalid images to be generated without any sign of an error.
 
+*DECOMPRESS_MODULES*::
+
+	Switch (yes/no) to decide wether kernel modules should be compressed or
+	uncompressed during initramfs creation. Enabled by default for faster bootup
+	and smaller initramfs size. Disable it to reduce RAM usage in early userspace.
+
 See Also
 --------
 *mkinitcpio*(8)
@@ -79,4 +85,4 @@ mkinitcpio is created and maintained by the Arch Linux Developer community.
 
 Copyright
 ---------
-Copyright (c) Arch Linux 2006-2021
+Copyright (c) Arch Linux 2006-2022
diff --git a/mkinitcpio b/mkinitcpio
index 549f381..924fc0e 100755
--- a/mkinitcpio
+++ b/mkinitcpio
@@ -639,6 +639,8 @@ if [[ $KERNELVERSION != 'none' ]]; then
     [[ -d $_d_kmoduledir ]] || die "'$_d_kmoduledir' is not a valid kernel module directory"
 fi
 
+[[ -z $MODULES_DECOMPRESS ]] && MODULES_DECOMPRESS=yes
+
 _d_workdir=$(initialize_buildroot "$KERNELVERSION" "$_opttargetdir") || cleanup 1
 BUILDROOT=${_opttargetdir:-$_d_workdir/root}
 
diff --git a/mkinitcpio.conf b/mkinitcpio.conf
index 3494fab..19ec038 100644
--- a/mkinitcpio.conf
+++ b/mkinitcpio.conf
@@ -65,3 +65,9 @@ HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)
 # COMPRESSION_OPTIONS
 # Additional options for the compressor
 #COMPRESSION_OPTIONS=()
+
+# MODULES_DECOMPRESS
+# Decompress kernel modules during initramfs creation.
+# Enable to speedup boot process, disable to save RAM
+# during early userspace. Switch (yes/no) default=yes
+#MODULES_DECOMPRESS=""
-- 
2.37.1.377.g679aad9e82


From 72a1d5a3e8d8ee09c78cd7dfccdd6eb323296304 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tobias.powalowski@googlemail.com>
Date: Sun, 13 Mar 2022 20:49:15 +0100
Subject: [PATCH 06/12] Good idea, add the default value

Co-authored-by: nl6720 <nl6720@gmail.com>
---
 mkinitcpio.conf | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/mkinitcpio.conf b/mkinitcpio.conf
index 19ec038..8acf414 100644
--- a/mkinitcpio.conf
+++ b/mkinitcpio.conf
@@ -69,5 +69,5 @@ HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)
 # MODULES_DECOMPRESS
 # Decompress kernel modules during initramfs creation.
 # Enable to speedup boot process, disable to save RAM
-# during early userspace. Switch (yes/no) default=yes
-#MODULES_DECOMPRESS=""
+# during early userspace. Switch (yes/no).
+#MODULES_DECOMPRESS="yes"
-- 
2.37.1.377.g679aad9e82


From 74b323c36e275bc8b7a4e5361a5022a4bcf99107 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tobias.powalowski@googlemail.com>
Date: Mon, 14 Mar 2022 13:50:18 +0100
Subject: [PATCH 07/12] shorter version, thanks

Co-authored-by: Morten Linderud <morten@linderud.pw>
---
 mkinitcpio | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/mkinitcpio b/mkinitcpio
index 924fc0e..a8171b8 100755
--- a/mkinitcpio
+++ b/mkinitcpio
@@ -639,7 +639,7 @@ if [[ $KERNELVERSION != 'none' ]]; then
     [[ -d $_d_kmoduledir ]] || die "'$_d_kmoduledir' is not a valid kernel module directory"
 fi
 
-[[ -z $MODULES_DECOMPRESS ]] && MODULES_DECOMPRESS=yes
+MODULES_DECOMPRESS=${MODULES_DECOMPRESS:-"yes"}
 
 _d_workdir=$(initialize_buildroot "$KERNELVERSION" "$_opttargetdir") || cleanup 1
 BUILDROOT=${_opttargetdir:-$_d_workdir/root}
-- 
2.37.1.377.g679aad9e82


From e62cf9634f8b778c91f8dbe234872ede7f8414e0 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tpowa@archlinux.org>
Date: Fri, 11 Mar 2022 16:04:51 +0100
Subject: [PATCH 08/12] fix reproducibility, in case of /var/cache is included
 in initramfs

---
 mkinitcpio | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/mkinitcpio b/mkinitcpio
index a8171b8..af779f9 100755
--- a/mkinitcpio
+++ b/mkinitcpio
@@ -711,6 +711,8 @@ trap -- ERR
 
 # this is simply a nice-to-have -- it doesn't matter if it fails.
 ldconfig -r "$BUILDROOT" &>/dev/null
+# remove /var/cache/ldconfig/aux-cache for reproducability
+[[ -e $BUILDROOT/var/cache/ldconfig/aux-cache ]] && rm $BUILDROOT/var/cache/ldconfig/aux-cache
 
 # Set umask to create initramfs images and EFI images as 600
 umask 077
-- 
2.37.1.377.g679aad9e82


From 1def3c840c88b7513e902d7164d3fda210b6b3a0 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tobias.powalowski@googlemail.com>
Date: Sun, 13 Mar 2022 20:37:55 +0100
Subject: [PATCH 09/12] Replace check with rm -f

Co-authored-by: nl6720 <nl6720@gmail.com>
---
 mkinitcpio | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/mkinitcpio b/mkinitcpio
index af779f9..18b5cd0 100755
--- a/mkinitcpio
+++ b/mkinitcpio
@@ -712,7 +712,7 @@ trap -- ERR
 # this is simply a nice-to-have -- it doesn't matter if it fails.
 ldconfig -r "$BUILDROOT" &>/dev/null
 # remove /var/cache/ldconfig/aux-cache for reproducability
-[[ -e $BUILDROOT/var/cache/ldconfig/aux-cache ]] && rm $BUILDROOT/var/cache/ldconfig/aux-cache
+rm -f $BUILDROOT/var/cache/ldconfig/aux-cache
 
 # Set umask to create initramfs images and EFI images as 600
 umask 077
-- 
2.37.1.377.g679aad9e82


From ad70e10a5d1c2042e2340488014ac0f8050c37d1 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tobias.powalowski@googlemail.com>
Date: Sun, 13 Mar 2022 20:46:26 +0100
Subject: [PATCH 10/12] Fix typo in commit reproducibility

---
 mkinitcpio | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/mkinitcpio b/mkinitcpio
index 18b5cd0..f67370d 100755
--- a/mkinitcpio
+++ b/mkinitcpio
@@ -711,7 +711,7 @@ trap -- ERR
 
 # this is simply a nice-to-have -- it doesn't matter if it fails.
 ldconfig -r "$BUILDROOT" &>/dev/null
-# remove /var/cache/ldconfig/aux-cache for reproducability
+# remove /var/cache/ldconfig/aux-cache for reproducibility
 rm -f $BUILDROOT/var/cache/ldconfig/aux-cache
 
 # Set umask to create initramfs images and EFI images as 600
-- 
2.37.1.377.g679aad9e82


From cffa6bc48d39d48e65dee17febbc567fc1695b58 Mon Sep 17 00:00:00 2001
From: Tobias Powalowski <tobias.powalowski@googlemail.com>
Date: Tue, 15 Mar 2022 15:58:47 +0100
Subject: [PATCH 11/12] add quotes to $BUILDROOT

---
 mkinitcpio | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/mkinitcpio b/mkinitcpio
index f67370d..1490407 100755
--- a/mkinitcpio
+++ b/mkinitcpio
@@ -712,7 +712,7 @@ trap -- ERR
 # this is simply a nice-to-have -- it doesn't matter if it fails.
 ldconfig -r "$BUILDROOT" &>/dev/null
 # remove /var/cache/ldconfig/aux-cache for reproducibility
-rm -f $BUILDROOT/var/cache/ldconfig/aux-cache
+rm -f "$BUILDROOT"/var/cache/ldconfig/aux-cache
 
 # Set umask to create initramfs images and EFI images as 600
 umask 077
-- 
2.37.1.377.g679aad9e82


From ae9ca14b32daf95ca46578798a97426b8361be9c Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 17 Mar 2022 20:29:57 +0100
Subject: [PATCH 12/12] mkinitcpio: preserve module dir by the kernel, remove
 modules.order hack

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 functions | 21 +++++++--------------
 1 file changed, 7 insertions(+), 14 deletions(-)

diff --git a/functions b/functions
index cf9b991..3b1da9b 100644
--- a/functions
+++ b/functions
@@ -874,20 +874,20 @@ install_modules() {
         return 0
     fi
 
-    cp "$@" "$moduledest/kernel"
-
     if [[ $MODULES_DECOMPRESS == yes ]]; then
-        # unzip modules prior to recompression
+
         for m in "$@"; do
+        install -D -m644 "$m" "$BUILDROOT/$m"
+        # unzip modules prior to recompression
             case $m in
                 *.xz)
-                    xz_comp+=("$moduledest/kernel/${m##*/}")
+                    xz_comp+=("$BUILDROOT/$m")
                     ;;
                 *.gz)
-                    gz_comp+=("$moduledest/kernel/${m##*/}")
+                    gz_comp+=("$BUILDROOT/$m")
                     ;;
                 *.zst)
-                    zst_comp+=("$moduledest/kernel/${m##*/}")
+                    zst_comp+=("$BUILDROOT/$m")
                     ;;
             esac
         done
@@ -898,14 +898,7 @@ install_modules() {
 
     msg "Generating module dependencies"
     install -m644 -t "$moduledest" "$_d_kmoduledir"/modules.builtin
-
-    # we install all modules into kernel/, making the .order file incorrect for
-    # the module tree. munge it, so that we have an accurate index. This avoids
-    # some rare and subtle issues with module loading choices when an alias
-    # resolves to multiple modules, only one of which can claim a device.
-    awk -F'/' '{ print "kernel/" $NF }' \
-        "$_d_kmoduledir"/modules.order >"$moduledest/modules.order"
-
+    install -m644 -t "$moduledest" "$_d_kmoduledir"/modules.order
     depmod -b "$BUILDROOT" "$KERNELVERSION"
 
     # remove all non-binary module.* files (except devname for on-demand module loading)
-- 
2.37.1.377.g679aad9e82

