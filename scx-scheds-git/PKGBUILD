# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r187.g6718fb1e
pkgrel=2
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
de026ebf164cad78f4887f2701337ca079997869 # scheds: Introduce scx_beerland
6acfe82f919508795d95d5cbbf4fdbd80c700b87 # scx_loader: Add beerland scheduler
f1136d0d0b2d0ebcdd325cb3e35f683cd64ca08d # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
f08894a7d6d2741934a88960ed214ce84edb189f # scx_beerland: Better SMT handling
8d290b3d9b8862cffc8d449217c7c845227b9c6d # scx_beerland: Prevent migrations for non-overloaded CPUs
4a6159b0d507665f4ff52a119834133fe646fede # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
d7ed1684479f921f6b46273f2544b21251f90de6 # scx_beerland: Attempt to wakeup idle CPUs only when needed
2d1c5d9a683e7854ba618921ab67136109245b1e # scx_beerland: Introduce --preferred-idle-scan / -P
fb39ef207b5db8d82365d0f925bfe498dc3215f4 # scx_beerland: Always dispatch from any CPU when system is busy
252beff3695f15fd2a33c0a8244abcc0897f05e4 # scx_beerland: Keep using the same CPU if system is busy
b8a2dc5d47732347fc2bc0964b0ff210c8e3ec97 # scx_beerland: Use deadline-based scheduling
7087b6d0ecd53ce0f89ee871de55a8ecc3bcf7e5 # scx_loader: Add chaos scheduler
a5e2b718ceedc961dccd6638aeffc574f7495ce3 # scx_loader: Error when non-auto modes do not have args
3f415805e8cb8edacd52f3ea3c61bfcd16bc890f # scxctl: Implement error handling
53ea0abae3d9277e51b43e4e50fab359adddc25b # scx_cosmos: Improve SMT handling
9692caaec3df8cceb4e2c0384b7f9386e2fa15d3 # scx_cosmos: CPU capacity awareness
0a206228624e1962e4d8cb67f0bbd5681df6912d # scx_bpfland: Scale vruntime credit based on queue depth
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   local src
   for src in "${source[@]}"; do
     src="${src%%::*}"
     src="${src##*/}"
     [[ $src = *.patch ]] || continue
     echo "Applying patch $src..."
     patch -Np1 < "../$src"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
