# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r185.gbbc51c06
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
44df37f7c1e685ac2fd66dd39adc06e0cf52adda # scheds: Introduce scx_beerland
f1cf285fb24f930a9307d7ec2dc9047f7cba2d64 # scx_loader: Add beerland scheduler
a467fd8418a58c22a39e0558221e577fafb54165 # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
d3fd57ed34c9c6b3e8010266b6dde4e43668c27a # scx_beerland: Better SMT handling
67b68907b9eda7f3bcd6cfa82ad71455bc834d7c # scx_beerland: Prevent migrations for non-overloaded CPUs
dd9910ea49eae536400ad602c93890983451fb3e # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
129bfa8f32bb07496ba3f4f38c711968075a53aa # scx_beerland: Attempt to wakeup idle CPUs only when needed
ede2f5505c6cac611b28dcdb092ad2b67aaee377 # scx_beerland: Introduce --preferred-idle-scan / -P
448b01e0d677700fca427158ecc8c53190fa1c42 # scx_beerland: Always dispatch from any CPU when system is busy
dd4d62bedd9fe18aec90147122c0868f8fc5308b # scx_loader: Add chaos scheduler
77c89257d993ee56094d2174117686367c9b695a # scx_loader: Error when non-auto modes do not have args
b4bf04b555340d46119c203ef6a57be6e6204ec0 # scxctl: Implement error handling
53ea0abae3d9277e51b43e4e50fab359adddc25b # scx_cosmos: Improve SMT handling
9692caaec3df8cceb4e2c0384b7f9386e2fa15d3 # scx_cosmos: CPU capacity awareness
fc93c0423a0639cc6bc517c52ee73d12bf0dada3 # scx_bpfland: Don't attempt migrations for sticky tasks
0a206228624e1962e4d8cb67f0bbd5681df6912d # scx_bpfland: Scale vruntime credit based on queue depth
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   local src
   for src in "${source[@]}"; do
     src="${src%%::*}"
     src="${src##*/}"
     [[ $src = *.patch ]] || continue
     echo "Applying patch $src..."
     patch -Np1 < "../$src"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
