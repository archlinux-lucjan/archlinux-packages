# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.5.r69.gd7576d4
pkgrel=3
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
c8a920737149ed0882f35589f5e10794a6423d52 # scx_bpfland: prevent per-CPU DSQ stall with per-CPU kthreads
8b3f5fd7d020ea7a6a687c8f35edd49c2920b4db # WIP: scx_bpfland: handle user-space futex critical sections
290bfd991ccf078b0d4845ddedcadcafb31cdeb5 # scheds: introduce scx_fair
2e17c8f4f0bb42e21015afbd3682a7e34584a183 # scx_fair: introduce lowlatency mode
3a7397b277bc381e4a935b709622e0e73996e610 # scx_fair: use cast_mask() from common.bpf.h
24adb7ee8406f56056a5a452b3b3326fa06321d0 # scx_fair: always give tasks a chance to run on an idle CPU
92bf6c349fc66c7265285dd875056908ad485f44 # scx_fair: introduce per-CPU DSQs
7ad966d80c86aa36eecf3b82da4f0a3e145f8bc1 # scx_fair: apply minimum vruntime when task is dispatched
3baac16485845dd4a5992d709091afc952da331b # scx_fair: do not scale the assigned time slice based on task priority
69d32d0458f49a1b2fe097039b131221e8aed251 # scx_fair: make lowlatency default and drop it as an option
c8135fbe3d959c958b5cbac5946930fed90ce620 # scx_fair: prevent per-CPU DSQ stall with per-CPU kthreads
45aed1fd23c2d714d15ba3a611d8e31dc0bfbe83 # WIP: scx_fair: handle user-space futex critical sections
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
