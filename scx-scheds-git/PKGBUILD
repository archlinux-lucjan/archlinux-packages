# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r238.gd7ff41c7
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
optdepends=(
'scx-tools-git: scx_loader and scxtl - A DBUS Interface for Managing sched_ext Schedulers '
)
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
359c4146401e5bcfadaa742e1cd1069b591606d8 # scx_bpfland: Rethink per-CPU tasks prioritization
caa033f2bdd0523e2598881ca8774c2b6d0f2b70 # scx_bpfland: Dynamic time slice
c46ce4bb4b563d6350779a141347f5a6599d717e # scheds: Introduce scx_beerland
6bcfbc79d5448bce9dc55c273418d9103cb9924e # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
dcd2033dd3dc6bff3547f55055839e1950bd7dec # scx_beerland: Better SMT handling
9cc30625ec3bd13b506925fae64e38a4922b804a # scx_beerland: Prevent migrations for non-overloaded CPUs
17b435dde935f98d8774e69dadf48a33a0804ee2 # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
cdf87e1e6b55f9dd735d0b64babe883803208d55 # scx_beerland: Attempt to wakeup idle CPUs only when needed
0c511981efe3153e3796cab63a2393d9eccedd3f # scx_beerland: Introduce --preferred-idle-scan / -P
f71d93f67f7a43c7a7b9e00bbaf7a17ecb6b32e0 # scx_beerland: Always dispatch from any CPU when system is busy
5f92116edbb5a1d3cac4e1a3e81e10760c629879 # scx_beerland: Keep using the same CPU if system is busy
c950c94359fc4641c99f1d967369c187ef6f54c9 # scx_beerland: Use deadline-based scheduling
d3f5b0a871a60193faefaae92462cd6581e88985 # scx_beerland: Try to keep I/O-bound task on the same CPU
9e79293d4f8a7b9d5642a3cc24d4c0c2a540498b # scx_beerland: Sticky task classification based on average runtime
53ea0abae3d9277e51b43e4e50fab359adddc25b # scx_cosmos: Improve SMT handling
9692caaec3df8cceb4e2c0384b7f9386e2fa15d3 # scx_cosmos: CPU capacity awareness
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   local src
   for src in "${source[@]}"; do
     src="${src%%::*}"
     src="${src##*/}"
     [[ $src = *.patch ]] || continue
     echo "Applying patch $src..."
     patch -Np1 < "../$src"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +
}
