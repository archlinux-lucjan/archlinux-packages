# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.10.r240.g49709b11
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx"
        '0001-meson-install-scx_wd40.patch')
sha256sums=('SKIP'
            '9fc22d4c9fcda042b13dcc0a9958ef1f560492a356d9fa653c0fe08790d2c968')
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")

_backports=(
27dda49b831cd9c37ec252ece3004b8be3ac68f4 # scx_bpfland: Introduce per-CPU DSQs
1838521f41349cfecfc3d1210e31f7a5c1226042 # scx_bpfland: Be more conservative at picking idle CPUs in the same node
9a6462535c739e5e4f0e8f53822f01ca0b24a08e # scx_bpfland: Re-introduce per-node DSQs
13ac2dff9205ce7448b095119859f3e5ba26b368 # scx_bpfland: Switch to per-node DSQs when system is busy
fd02fead6493bdbc981c8918003a86f9e81c7660 # scx_bpfland: Use --local-cpu to force per-CPU DSQs mode
476417ae06f14b764c1d9194331553c9cde7ce5c # scx_bpfland: Normalize task weight
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled -D cargo_home="$srcdir"/scx
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
