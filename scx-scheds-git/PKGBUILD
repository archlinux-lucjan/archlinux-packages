# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r201.gbd6de22c
pkgrel=2
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
b261873c28bd23de1bcf02b5151b3237afc3d60a # scheds: Introduce scx_beerland
b35958465d72770231b752552c0be272a6df6115 # scx_loader: Add beerland scheduler
e01eca56f799c18548c38de73af3950063bdf07b # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
298739a4852f7857045945cd511c069d5b3bc1da # scx_beerland: Better SMT handling
7795d8da11a1e242bd69bc8ebf29bd1d5033a5b5 # scx_beerland: Prevent migrations for non-overloaded CPUs
e1f1edba22587100676aa47961f75c8e5a848da1 # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
b509db6b7b9da2f539f6b1e45695d47eed59dd0d # scx_beerland: Attempt to wakeup idle CPUs only when needed
b6e359fefd6e1266e6712a52da1e15d649062085 # scx_beerland: Introduce --preferred-idle-scan / -P
02b9b7fadfb222511a3fed6dc4a0363ff5c32630 # scx_beerland: Always dispatch from any CPU when system is busy
dabcb1d5b2f6d044d3003ba67cde5be6fcbdad1c # scx_beerland: Keep using the same CPU if system is busy
3b5adacce7cba52a04f5bceccbc91022d2669564 # scx_beerland: Use deadline-based scheduling
695bb48fa697d422f2f34b1d1967c5cfc31201fd # scx_beerland: Try to keep I/O-bound task on the same CPU
af908fd4acf3a1afc19c1406a794d9c7889ad50a # scx_loader: Add chaos scheduler
927deefcbe4a6514d3aaacf48d3cdd538f536d86 # scx_loader: Error when non-auto modes do not have args
d71be801eba08bd813856ef4dd98ca976f043622 # scxctl: Implement error handling
53ea0abae3d9277e51b43e4e50fab359adddc25b # scx_cosmos: Improve SMT handling
9692caaec3df8cceb4e2c0384b7f9386e2fa15d3 # scx_cosmos: CPU capacity awareness
0a206228624e1962e4d8cb67f0bbd5681df6912d # scx_bpfland: Scale vruntime credit based on queue depth
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   local src
   for src in "${source[@]}"; do
     src="${src%%::*}"
     src="${src##*/}"
     [[ $src = *.patch ]] || continue
     echo "Applying patch $src..."
     patch -Np1 < "../$src"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
