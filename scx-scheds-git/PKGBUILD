# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r11.g894c0015
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
e9a98b37f6d141a77024b3da25a19519f8e40dd7 # scx_cosmos: Improve SMT handling
3bc43a65a8e29368b08fb179deec2f7a0fb87dad # scx_cosmos: Prioritize faster CPUs
8462c7f1c8abb827eb5ef32fcc26f507a2871cfc # scx_cosmos: Drop flat/preferred idle scan
f31fcc00e2872188b6b9b4fe439681ac1bb9963f # scx_bpfland: Rework idle CPU selection and scheduling policy
ec2ec268831397e44c7d6f242783f9cc69a6d6dd # scx_loader: Update performance profiles for scx_bpfland
72d37ff84b7105e268e8e83d55ceae3edf6c6e1e # scx_bpfland: Introduce --no-sticky-tasks
be4c7cc32d73d96016f669503a5c94dc935b97e1 # scheds: Introduce scx_beerland
7a1462ed7193727202b6c5c954c7dbf2eea1c40c # scx_loader: Add beerland scheduler
9268254dcf2e4fa771e4fea1ec4d144f4b1f07f6 # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
cb5123455d78d2f430374d8e0f9ae6fa0416ede4 # scx_beerland: Better SMT handling
cf40dc95b1e25b6a85d2049f0c40bd71380bd4f0 # scx_beerland: Prevent migrations for non-overloaded CPUs
0fa3f92667882149bd476a931fec9671fed198f9 # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
002dca8f5a06039d5dd2777300ae95f6a7f2e4ec # scx_loader: Add chaos scheduler
ecff951c6cbf54bb44e1c805bd1970a8cac75978 # scx_loader: Error when non-auto modes do not have args
5cd8ec7fbafeafba2d2414560ae9b0868e81a667 # scxctl: Implement error handling
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
