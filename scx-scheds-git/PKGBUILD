# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
gitname=scx
pkgver=0.1.10.r213.g3df7a13
pkgrel=22
pkgdesc="sched_ext schedulers"
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx' 'etc/systemd/journald@sched-ext.conf')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
1a1a16b9e9db1a6e8da7af8e4c379d580bcb8578 # scx_bpfland: fix typo in slice_ns definition
3a47b484afba944efd906a97f840be709b00c66f # scx_bpfland: report interactive tasks to stdout
f59aa52fe7de332da46804218800ef8a9299a11a # scx_bpfland: expose the amount of online CPUs
c3ebdd338f5d3ec0e5531b18df92aa84ec86d1ed # scx_bpfland: prevent slice delta overflow
1babb2b92decc31cc08e6eec8507723b6d3271be # scx_bpfland: prevent per-CPU kthreads starving other tasks
640bd562ff0bafad623d65f1743d22d7d7f895ae # scx_bpfland: prevent tasks from abusing interactive priority boost
2d34c6cc635285336f8829e308c0d35ef6fbeabd # scx_bpfland: prevent flood of "interactive" tasks
e081b2a294d12576b3273c878012a06798aeacab # scx_lavd: rename LAVD_MAX_CAS_RETRY to LAVD_MAX_RETRY
9ed488798ea9fdcf003aa722432e7f8ba7a3b3b7 # scx_lavd: use task's runtime to determine its deaddline
c72e063680bb4bc7e0cf518093ef6032f6d7f3cb # scx_lavd: do not use lat_prio_to_greedy_thresholds
48debe416e9f9e8b48492d3bc41a904f46151c83 # scx_lavd: tuning the deadline equation under high load
bd964acff62aad702de36692c6831c47f2487db0 # scx_lavd: deprioritize a newly forked task in latency
408ea7892c4e92a11f738f2f6ee7bf9aade91bc1 # scx_lavd: induce sched_prio_to_latency_weight from slice weight
bdbfeb9fd136287231296ec792f92d2f9e5d4a20 # scx_lavd: use logical current clock for virtual deadlines
)

_reverts=(
)

pkgver() {
  cd $gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
 cd $gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $gitname
  meson install -C build --destdir "${pkgdir}"
  install -Dm644 "LICENSE" "${pkgdir}/usr/share/licenses/$pkgname/LICENSE"
}
