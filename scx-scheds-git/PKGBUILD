# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.5.r220.g9d45a35
pkgrel=2
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
58fb11b5b9e49f98737552c3397ed25f4e5747bd # scheds: introduce scx_fair
89749ecad75081bfc1375cb8ac5138a35139cb53 # scx_lavd: fix/work around a verifier error
257a3db376321faff0c9154d4035af158331b8b6 # scx_lavd: add ops.cpu_release()
47dd1b9582f717d925d5b8fcdfa44075e03d1c41 # scx_lavd: respect a chosen cpu even if it is not idle
07ed8215110f2a767b1e88b8d7026535a4a91168 # scx_lavd: incorporate task's weight to latency criticality
6fb57643fbf62a82ea2fb4007cd4f16899e6246c # scx_lavd: remove the time restriction in preemption
9acf950b755319f3dfec560a2d29d64b56669761 # scx_lavd: change how to use the context information for latency criticality
731a7871d71c3536c146c363ef25e15ceb5442d0 # scx_lavd: change the greedy penalty function
b90ecd7e8fb04db7260c4d5dd51567009ded4b52 # scx_lavd: proactively kick a CPU at the ops.enqueue() path
ad37e2e4d2e36fe5ddc303da941d7f9339904809 # Set minimal meson version to silent new warnings
748887b05827994d4ff3633d0229d6d41e25a9e2 # Downgrade version to 1.2.0
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
