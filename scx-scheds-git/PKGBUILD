# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
gitname=scx
pkgver=1.0.3.r95.gbf67b83
pkgrel=6
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx' 'etc/systemd/journald@sched-ext.conf')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
9368c6881d5ddc2fdf4573f9de9db935041624a0 # scx_lavd: replace get_task_cpu_id() to scx_bpf_task_cpu()
d4bb35e6516b7203f935c2c7bbb4837470562295 # scx_lavd: use itertools::iproduct!() for a nested loop
9551657b4262b60770c313c69b80bd19bab5a608 # scx_lavd: prefer big cores in the performance mode
4f906f1f491fe0619de19aeddd09ad31323a9a39 # scx_lavd: update README since it supports multi-CCX/NUMA
954b684a7075520a85f498b71b6c38634d8d0a98 # scx_lavd: update nr_queued_task every system stat update interval
950710990fb0a69fd2c14be941e284e09b7766cb # scx_lavd: move time slice calculation to ops.enqueue() and ops.select_cpu()
d1d9e97d0898a7a8897bd47751849b5fcbf57f41 # scx_lavd: reduce LAVD_CPDOM_MAX_DIST to 4
38779dbe8b1b79f11a20e927e95c36d1dcf13a27 # scx_lavd: improve pick_idle_cpu()
82f55b95b2e71b792315a36153f6ba38b851f496 # scx_lavd: add a fast path in pick_idle_cpu() when SMT is not activated
be7d06e280cfcdd494df0e10d8e8409872ba30d1 # scx_lavd: make the old BPF verifier happy :-(
4e3c36ca3f81db7940f487ee3ff836d437d2ba46 # scx_lavd: handle the missing cases in time slice calculation
1e818e565a418b0b7d4f6a5a2aee9819c8a34e1a # scx_bpfland: try to keep tasks running on the primary domain
f2a227e95da8737fa023f44ba68c1e3789e5da3e # version-too: Avoid exception by skipping workspace cargo files
)

_reverts=(
)

pkgver() {
  cd $gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $gitname
  meson install -C build --destdir "${pkgdir}"
  install -Dm644 "LICENSE" "${pkgdir}/usr/share/licenses/$pkgname/LICENSE"
}
