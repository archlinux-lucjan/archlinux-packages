# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.5.r69.gd7576d4
pkgrel=2
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
c8a920737149ed0882f35589f5e10794a6423d52 # scx_bpfland: prevent per-CPU DSQ stall with per-CPU kthreads
f4296a5f30c73c02fc730fa313f3e2ae29db6e46 # scheds: introduce scx_fair
506276415868e56a81ce16efbb4f4f7bc26afe71 # scx_fair: introduce lowlatency mode
fc6d75be561109837c59fe81ee230150b11f5fcd # scx_fair: use cast_mask() from common.bpf.h
df6ea98413744445192499d15b3423019d058886 # scx_fair: always give tasks a chance to run on an idle CPU
20f6bb529b08e743fbb23b1061099313a34f15f0 # scx_fair: introduce per-CPU DSQs
3ce64dfcef4b6d3d97598f535abed7caa5fdc998 # scx_fair: apply minimum vruntime when task is dispatched
657e8c6861f99cd5b057453519848e6f10c9b25d # scx_fair: do not scale the assigned time slice based on task priority
e2aadcc0b4fe86aa35f26d337800870d746228e3 # scx_fair: make lowlatency default and drop it as an option
094e1f05c573aef6fca4832ff4d0b4edfda3d16f # scx_fair: prevent per-CPU DSQ stall with per-CPU kthreads
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
