# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
gitname=scx
pkgver=0.1.10.r209.gfc0d1bd
pkgrel=7
pkgdesc="sched_ext schedulers"
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx' 'etc/systemd/journald@sched-ext.conf')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
d440b1819f9f72da397b51b7f23af0b977b0dc60 # scx-scheds: Add After=graphical.target into service (third attempt)
c8a60e2566c6387aeed27190feb9764023035dbf # libalpm: make sure that symlink will be moved
8dd528abfdeee4f6f0c4a1754a420efa3c91bc7d # scx_bpfland: pass enqueue flags when dispatching kthreads
6a64182ef23e4083843c51551b612c661e84cfa9 # scx_bpfland: always classify interactive tasks
995577762a6b6513802126ab00ce123a6e0efc49 # scx_bpfland: refill task time slice
47d929dc326c91dad04ec18c4fdfa3c6a18bc3b6 # scx_bpfland: introduce dynamic nvcsw threshold
79c8cbc1da24e3e8becc3ada1f3468ea08509507 # scx_bpfland: introduce a tunable for the max nvcsw threshold
0b5019c77a671fb178ecaaa71c97096d8eee206b # scx_bpfland: prevent per-CPU kthreads starving other tasks
9f7c4e082cad51f6a8f3aff8bfa93aca9e7773e1 # scx_bpfland: always give a full timeslice to interactive tasks
8a5a3c86cd9bdf15eb562d2d958f04e2469389f5 # scx_bpfland: fix typo in slice_ns definition
d7e38eedb2eceba81ceafc88c38b48e34978c80d # scx_bpfland: improve producer/consumer workloads
ced319c833ce35f08ca61002b56fc72a33dd4846 # scx_bpfland: report running interactive tasks to stdout
0d91265ac8a70df6a30eab55aef1472aae9310fb # scx_bpfland: bump up max time slice to 20ms
9141da8af08ebe41cc014093be16e6b640242881 # scx_bpfland: reduce starvation threshold to 1ms
)

_reverts=(
)

pkgver() {
  cd $gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
 cd $gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $gitname
  meson install -C build --destdir "${pkgdir}"
  install -Dm644 "LICENSE" "${pkgdir}/usr/share/licenses/$pkgname/LICENSE"
}
