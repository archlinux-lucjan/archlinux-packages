# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.5.r43.ga673dcf
pkgrel=2
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
9a29547e5ba24166f4959afa54343b516eacde2b # scx_bpfland: rework lowlatency mode
a58431bf57d0eb3c47e8354dd6d626657109bbd9 # scx_bpfland: prevent per-CPU DSQ stall
5e0694ba70de7119570729300a2c80d0ad0785b2 # WIP: scx_bpfland: handle user-space futex critical sections
09e2c9c9cea0303dfd206481e9fce1142eb5f4cd # scheds: introduce scx_fair
0e1918d6fc2dc9d6f2fdcb3f0be997464a752f16 # scx_fair: introduce lowlatency mode
da891320b18e35fb504a705fb78368b04ad887f7 # scx_fair: use cast_mask() from common.bpf.h
9264a47d4f1d696b5e5e408fec793a56055dfcaa # scx_fair: always give tasks a chance to run on an idle CPU
73b9a7cd05f5c431b215d4ddc3cd6b30bcd4b3d9 # scx_fair: introduce per-CPU DSQs
fa7551ecf2464fbc47a7a4dd5b0558083d8ab083 # scx_fair: apply minimum vruntime when task is dispatched
e95e9da8d0982e2cf0a59a2f4aaddbe99d753a69 # scx_fair: do not scale the assigned time slice based on task priority
39205fa37e6a69e3c68f618f87ddc7108bc4440f # scx_fair: make lowlatency default and drop it as an option
c566be7713fda9eebaff5dd059ffd193435fdb86 # WIP: scx_fair: handle user-space futex critical sections
7bd61f43342143838deb0dc1c5db280890c8143e # scx_loader: Add SwitchScheduler methods to DBUS interface
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
