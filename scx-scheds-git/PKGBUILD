# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r16.g5b20917d
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
6466938df3282ece4f7c045fa8cc995bbe5fe3f5 # scx_cosmos: Improve SMT handling
3ce467ae21ef5189ab280b3f86224c050b58e65a # scx_cosmos: Prioritize faster CPUs
f4019bab1a7b382a987450e8f72c5a4987a527db # scx_cosmos: Drop flat/preferred idle scan
3167d927e5839c86faf82c8371a7f3c3e67ae466 # scx_bpfland: Rework idle CPU selection and scheduling policy
f5c5271ebd5a6f1091254a921f6d9a41109c621c # scx_loader: Update performance profiles for scx_bpfland
9672db3cefedb7d069da65e6e4d1c3ad4a5389c3 # scheds: Introduce scx_beerland
e43fa10b84e7e6c47bf9cc3919780ecf794da5c1 # scx_loader: Add beerland scheduler
8817a673558c01b0ca0231765c5115b1075374d4 # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
95cdeb299caf2a27f66dfcabbd200d9314955b32 # scx_beerland: Better SMT handling
d5cf76b33b76f17905a4dbee5df4b22d4b4a373d # scx_beerland: Prevent migrations for non-overloaded CPUs
fa47c8c7df564f4123d5e3d17529106c83f759d3 # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
49c87f8a59f3a4264cbece7422998d0bfb94d4ad # scx_loader: Add chaos scheduler
91575852921d63f643436c8204c6df20aa11a6b5 # scx_loader: Error when non-auto modes do not have args
d863c35dafccd5d1dd4d8f96269383040613218f # scxctl: Implement error handling
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
