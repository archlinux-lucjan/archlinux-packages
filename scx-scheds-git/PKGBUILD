# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r187.g6718fb1e
pkgrel=3
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
51404aa7fa831a53e078372610fa6cc9f9a714a6 # scheds: Introduce scx_beerland
5b25c05ef1f5d13fe3e3653c44e58b33ce20d73c # scx_loader: Add beerland scheduler
e9eb784982304ce55aedcdb418792bb2087e9c66 # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
2b1bd2788d88f10135dd7dd6c5f1632cd2b19fad # scx_beerland: Better SMT handling
b49179e76cb610a4de5fddd3ff0f50289972490f # scx_beerland: Prevent migrations for non-overloaded CPUs
b219bff5ae94df51a202d1060f670e69cfa76358 # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
0c2ec9c6be861724a6b648f820eb1f56a46580c2 # scx_beerland: Attempt to wakeup idle CPUs only when needed
13a13088274c453aa55382dd9467c9ac853f3589 # scx_beerland: Introduce --preferred-idle-scan / -P
ef5eaea83de8c4969efa46d24ffa25acd2ff8321 # scx_beerland: Always dispatch from any CPU when system is busy
baba46f8ece2ae5b2d3925f679756c220473a0c2 # scx_beerland: Keep using the same CPU if system is busy
3f2616395fa70015ec04ca1d62f3e648d2aa1887 # scx_beerland: Use deadline-based scheduling
9ed8db5f4a80675f8e7ca3ca29ac0b39baaad1ab # scx_beerland: Try to keep I/O-bound task on the same CPU
d959795945ec0dd4284c35f6084244951258514e # scx_loader: Add chaos scheduler
50b67c724fa43ef2e33b3b9c41a1ebbbf3ec70cf # scx_loader: Error when non-auto modes do not have args
5a2c2a01d33c84862f013096cae6683d970f4376 # scxctl: Implement error handling
53ea0abae3d9277e51b43e4e50fab359adddc25b # scx_cosmos: Improve SMT handling
9692caaec3df8cceb4e2c0384b7f9386e2fa15d3 # scx_cosmos: CPU capacity awareness
0a206228624e1962e4d8cb67f0bbd5681df6912d # scx_bpfland: Scale vruntime credit based on queue depth
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   local src
   for src in "${source[@]}"; do
     src="${src%%::*}"
     src="${src##*/}"
     [[ $src = *.patch ]] || continue
     echo "Applying patch $src..."
     patch -Np1 < "../$src"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
