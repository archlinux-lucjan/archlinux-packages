# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.5.r45.g2801b10
pkgrel=2
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
9170d1f22f69ea52b4600815f0e6bd03eee22a2e # scx_bpfland: skip idle CPU selection for tasks with migration disabled
721a326b9d034ff592237bde7bae478efb10e3e2 # WIP: scx_bpfland: handle user-space futex critical sections
b6a7ce500be7387532c48fa7c65120598e339801 # scheds: introduce scx_fair
88a4b64634c25c894d6e74991327b8e78622306d # scx_fair: introduce lowlatency mode
52955ffacb68f0837f501041510096183e01f2af # scx_fair: use cast_mask() from common.bpf.h
cc2c24912eba7587b0abe188f509209742db37ed # scx_fair: always give tasks a chance to run on an idle CPU
ae2570c6259dfe0ad285faa905d2b294e64a5f1e # scx_fair: introduce per-CPU DSQs
4900a2725c97b6ea6fbdb2e5d6f40f10bfde4c66 # scx_fair: apply minimum vruntime when task is dispatched
388e14af57c1fffdef3c0bd1ed68c9c574ab2060 # scx_fair: do not scale the assigned time slice based on task priority
73bb973da3bdc9a96195f318d88f4769039cc1fe # scx_fair: make lowlatency default and drop it as an option
2bee8fcb242e8a74a759d99c65eecdff698a1ff7 # scx_fair: skip idle CPU selection for tasks with migration disabled
f45794254da479282189ddcb7ecfd2c1f491da7c # WIP: scx_fair: handle user-space futex critical sections
7bd61f43342143838deb0dc1c5db280890c8143e # scx_loader: Add SwitchScheduler methods to DBUS interface
5414d052f16f520da68cb831185678c7978a409a # Drop journald from libalpn hooks
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
