# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.15.r286.g63039a27
pkgrel=3
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq' 'protobuf' 'libseccomp' 'bpf' 'libbpf')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")

_backports=(
2cf71102c087d8568d63066961adf0862f8f65d4 # scx_loader: Add chaos scheduler
7870befb8d314bc1cdea633690278003c26f3531 # meson: install scx_mitosis and scx_wd40
8ab2d7e361ab845eabdf919dacf4491ff54fb4e2 # scx_loader: Add mitosis scheduler
740eb9528f5cf75755765d47f6cb6c9be3444bf7 # scx_loader: Add wd40 scheduler
f965c161b898f845523ef4df8cf50b456985ec77 # scxctl: cache DBUS results to eliminate redundant calls
5d4de7fa72d0c29fdbece5d193cf2f2c9978ba2f # scxctl: optimize scheduler list display with iterator patterns
e5904191236c5a9b00be4eb115205c501a050daf # scxctl: use &str parameters for string utility functions
aaf9ad4ae5cf6c41de96b27fef04242268f72a4d # scxctl: replace unwrap() calls with proper error handling
cb2c17ac354432bc67e8cdb4fb3b4ca52f94e4a2 # scxctl: extract helper functions to reduce duplication
a5280ffea104c935376229bb7cad7e5aea623b80 # scxctl: simplify string processing utility functions
69b61134d646ddfd73a5fc905a80c232ecd30b4b # scxctl: some Rust formatting changes to satisfy the CI
5f5f5945903c7fbbf63594558363e60c83999e34 # scx-scheds: drop scx.service
ceb67dbbe09fb4eba2c62afcac1bb1feeceecf92 # scx-scheds: drop openrc support
6c57e67be12d0c827d80f2e8f9425f34102c54d9 # scx-scheds: moving files to the services directory
8e25478b5d018de9a08eca039aef4ea10d17dd3f # scx_cargo: add specific crate for build time utilities
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D cargo_home="$srcdir"/scx \
    -D libbpf_a=disabled \
    -D bpftool=disabled \
    -D b_lto=true \
    -D b_lto_mode=thin
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
