# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.5.r45.g2801b10
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
2086c62b2146fab6c3eb59f0118fe46b91d21039 # WIP: scx_bpfland: handle user-space futex critical sections
3d083614af4685bebd47b7e55fb3d13451e384ee # scheds: introduce scx_fair
66b14ec623072958834a4faa4611d624ef5f5867 # scx_fair: introduce lowlatency mode
e4e6cbe082e47c03e7b96946459dde093e57a76f # scx_fair: use cast_mask() from common.bpf.h
50e071bc4e1a168687c0a15434dfa5b8927c3258 # scx_fair: always give tasks a chance to run on an idle CPU
bb92e2c7eeee1fc4a360bf46dda402d0b0b48067 # scx_fair: introduce per-CPU DSQs
b6e2cdb472aa43f7a46e5e2afc88f7cfc6702815 # scx_fair: apply minimum vruntime when task is dispatched
a320bd7c75a4f5ed8e72ee9ba0527ad63d5cdc4a # scx_fair: do not scale the assigned time slice based on task priority
591d30ee1abebf014bc1c9395f7b5fdf2baf470d # scx_fair: make lowlatency default and drop it as an option
fc16ad16950d387e6971c952aa453fa36456097c # WIP: scx_fair: handle user-space futex critical sections
7bd61f43342143838deb0dc1c5db280890c8143e # scx_loader: Add SwitchScheduler methods to DBUS interface
5414d052f16f520da68cb831185678c7978a409a # Drop journald from libalpn hooks
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
