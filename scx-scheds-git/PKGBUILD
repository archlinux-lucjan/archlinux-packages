# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.13.r334.g0d5e925f
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq' 'protobuf' 'libseccomp' 'bpf' 'libbpf')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx"
        '0001-meson-install-scx_mitosis-and-scx_wd40.patch'
        '0002-scx_loader-Add-missing-schedulers.patch')
sha256sums=('SKIP'
            '7580d75a4301b182b4e80f7b1238968054925e7fc2542307f72c0e28e4e8e314'
            '243e551735f89762c6dcc6ac281d399960921636ae86448716bd1dd72706f688')
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")

_backports=(
fd9dd757c091d9e9376a86240647964e1eefc934 # scx_flash: Clarify --local-pcpu implementation
4e43d52e23bb5a4ff8a2aaf3ad74087ec97aa32f # scx_flash: Soften primary domain affinity to favor full-idle SMT cores
8e8cc8c17926b99cfa16b4227a56680a6b589eae # scx_flash: Smooth target performance level
a5ab911464e283af134e806d35515b511728f6dd # scx_flash: Get rid of optional DSQs
8fb1384b936a39982920f830fe6b67d528cfce8f # scx_flash: Introduce --sticky-cpu
39c1dcdd68a349fe1cdd019c7389a90d468846df # scx_flash: Use per-CPU DSQs in function of CPU utilization
ea07c19f73261affd0dc5943d8bc79329ab7a755 # scx_flash: Simplify nvcsw evaluation
83d75c0c4343e6188ad7025fb2cf32889cb69c25 # scx_flash: Re-enable voluntary context switch prioritization by default
fb7e04f8eb14c5aa5d0788517023fea75c9fb766 # scx_flash: Introduce --cpu-busy-thresh
1061af6cb03fbd7bd06d0746f7074a9f9fda13bc # scx_flash: Tune default options for latency
f4aff2e72944793d1ce8b353ef6f48a65a92aed4 # scx_loader: Update performance profiles for scx_flash
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled \
    -D libbpf_a=disabled \
    -D bpftool=disabled \
    -D b_lto=true \
    -D b_lto_mode=thin \
    -D cargo_home="$srcdir"/scx
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
