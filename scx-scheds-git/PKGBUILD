# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r35.gfab92295
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
6a6c05a6bf651ab77a39181a76df4563aacfe378 # scx_rustland_core: Fix built-in idle CPU selection on older kernels
d4ad391321070ab45b0a2ddcb666f984c33f981b # scx_rustland_core: Keep task on the same CPU when target CPU is invalid
adecd102b009307d61ab518b2b579172a4eb9efb # scx_rustland_core: Make select_cpu() optional
70ea2e541b74968b7c332a48676ab3a6fc7b56d9 # scx_rustland_core: Improve user-space scheduler synchronization
c0a4c213c50e62afb17d8248916f7938aac75f6f # scx_rustland_core: Detect dequeue events
229a75116281a926611941aa45107612a4aad120 # scx_rustland_core: Always pick a valid idle CPU
87a3f9bd4dd9eeb50d6093523adc379d69870a12 # scx_rustland_core: Do not enqueue migration-disabled tasks
026355d770001fa5e3982c02af45e2a6268951ba # scx_rustland_core: Use a finite time slice for the user-space scheduler
e42ed1a64fcb07f62665dee45a462e57e2623c95 # scx_rustland: Dispatch more tasks as backlog increases
c02f247acf1af690f87aeb183692ce5ff6388176 # scx_rustland: Rework scheduling logic
8e8e84d96ec86ac050965f61892a3e882fed92a0 # scx_cosmos: Improve SMT handling
aad97d6c6ab8f6929774910a165b040287ff7a4d # scx_cosmos: Prioritize faster CPUs
3f4c021367a7997e308973cf9f60edb9c129329e # scx_cosmos: Drop flat/preferred idle scan
98a0c29a3d1fb18d8671d4c29b70dd60613066ad # scheds: Introduce scx_beerland
0ebc2475899acb8c0621a2866e2508c15f0236bb # scx_loader: Add beerland scheduler
c82fd2eb0c9ce60d1ce8ab530caab7e452f113b4 # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
f516a7009a83ada1d8838a83eb75433d6b6067fa # scx_beerland: Better SMT handling
c39554cbafc96255b4e0d6d1ed987bd10a4983a8 # scx_beerland: Prevent migrations for non-overloaded CPUs
8c37013147d3cfa1e95a0d32ca4dc029faf72b84 # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
d6b5ef9c6cb8f1afdca99dbd99989f7627e83597 # scx_loader: Add chaos scheduler
874a880efa72ccb4baa28256c8ae6372d800f222 # scx_loader: Error when non-auto modes do not have args
39a5810eac9abd7e29e1fe938c53c36e2bad84c5 # scxctl: Implement error handling
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
