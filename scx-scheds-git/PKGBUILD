# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
gitname=scx
pkgver=1.0.3.r95.gbf67b83
pkgrel=3
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx' 'etc/systemd/journald@sched-ext.conf')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
49db46c5d716c90f4c5e3677a302ff27508731cf # scx_lavd: replace get_task_cpu_id() to scx_bpf_task_cpu()
f6352a6b39a7abc469699a111c037fe6227f8388 # scx_lavd: use itertools::iproduct!() for a nested loop
36182ec40dc735d8684990e37003f14d54fdf779 # scx_lavd: prefer big cores in the performance mode
7ca29f45a6c3a7e32b08949d22beba91915b11c2 # scx_lavd: update README since it supports multi-CCX/NUMA
f4347586ffcb647fa1b48d7fee2481acb6c7a351 # scx_lavd: update nr_queued_task every system stat update interval
e30b1c9178fe79d29621797fd179ce74ccfc4983 # scx_lavd: move time slice calculation to ops.enqueue() and ops.select_cpu()
dc914e47e3c891b31b15f70d2ee17fd2cc53cba9 # scx_lavd: reduce LAVD_CPDOM_MAX_DIST to 4
0af74acd1cfcbd339ff3113a06ddd2bee0392ce4 # scx_lavd: improve pick_idle_cpu()
c9d8f3886340f65298ca4a5054275c14a4916d91 # scx_lavd: add a fast path in pick_idle_cpu() when SMT is not activated
c43433c5728f5a2a428af36fe7d6ea78fb5c3a9f # scx_lavd: make the old BPF verifier happy :-(
505f659ef13c58072dfa900c391d5de8f35cb3cf # scx_bpfland: enable per-CPU kthread direct dispatch by default
a4fb550c82bdc61446a4494a41d8b5c6622636aa # scx_bpfland: try to keep tasks running on the primary domain
)

_reverts=(
)

pkgver() {
  cd $gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $gitname
  meson install -C build --destdir "${pkgdir}"
  install -Dm644 "LICENSE" "${pkgdir}/usr/share/licenses/$pkgname/LICENSE"
}
