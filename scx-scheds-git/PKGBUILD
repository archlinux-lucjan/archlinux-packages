# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.10.r254.g01a1bfcf
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx"
        '0001-meson-install-scx_wd40.patch')
sha256sums=('SKIP'
            '9fc22d4c9fcda042b13dcc0a9958ef1f560492a356d9fa653c0fe08790d2c968')
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")

_backports=(
c7c81705976c02e4ffcf7e8fbcc64cdcf20fcd8c # scx_bpfland: Introduce per-CPU DSQs
a74fed09a20c0bc1bdafa42995922a3311d276b0 # scx_bpfland: Be more conservative at picking idle CPUs in the same node
a3584391d5a783e5030b8bbd02279cc135bca204 # scx_bpfland: Re-introduce per-node DSQs
4c23ed60fcda27790eb2a94584c97d8c9457d3f1 # scx_bpfland: Switch to per-node DSQs when system is busy
6d0378ab939d428cba8b329fe3ffca0745f67788 # scx_bpfland: Use --local-cpu to enable per-CPU DSQs mode
9b0b553df2d37732b0c5f98d9d4760ad976f1d85 # scx_bpfland: Normalize task weight
8c86efdc4b553623ed146adbccbfa9563678266d # scx_bpfland: Get rid of deprecated options
821460191e0050061a687780694cb52e1edb6085 # scx_bpfland: Re-enable proactive CPU wake-up when using per-node DSQs
ec3975f5296ca1c314c9d56040da45227beb4e46 # scx_lavd: Setting the flags in the main.rs.
67fa264a976a821733d857af76ec6e87d87ce8b7 # scx_lavd: Improve handling of per-CPU tasks.
627a912693e75df5095e245d3d2dc25b64f7890c # scx_lavd: Override SCX_SLICE_DFL at ops.running().
aa09ecaa7044d4472384c11fdc6f4baf4e1b7446 # scx_lavd: Enable SCX_OPS_ENQ_MIGRATION_DISABLED.
6010d6a06d0dff3038cb7c6ff6c276eab323681d # scx_lavd: Add a fast path for per-CPU task at ops.dispatch().
9604d998df5cfa72d7c224ea0fc9a387d9fa24e0 # scx_lavd: Directly dispatch a task when a system is idle enough.
8255f94e68d29277422220a80a03d0aeeef8be58 # scx_lavd: Remove try_get_task_ctx() and try_get_cpu_ctx().
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled -D cargo_home="$srcdir"/scx
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
