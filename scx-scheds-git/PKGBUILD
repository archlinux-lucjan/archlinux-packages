# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.14.r405.gc15f76b0
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq' 'protobuf' 'libseccomp' 'bpf' 'libbpf')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")

_backports=(
e84841dc22013b1992f786bb2e34ab6ffde25963 # scx_loader: add CurrentSchedulerArgs property
48f9e74ce87760ba429ca6d0737d9a94355a4a50 # scxctl: Handle CurrentSchedulerArgs property
b2b176469170fefe68a5ef277b2bb0cd5f561925 # scx_loader: add Restart method
20ef465011c03f27f032f38ef0fbfa33eb93e50f # scxctl: Add restart command
eba0a4e9d40c0454e517c4691bb37ad3f3625bbd # scxctl: cache DBUS results to eliminate redundant calls
08c406301c722033d54d4f17a2cf75973cfe7110 # scxctl: optimize scheduler list display with iterator patterns
7cbab0dbfbd2fc6e32471803f5de4f0a6e381295 # scxctl: use &str parameters for string utility functions
b079b4dd44d50381ddf903109244f067d910e8dd # scxctl: replace unwrap() calls with proper error handling
9052f25f42d4202c3a35078ed9658a89358bce1c # scxctl: extract helper functions to reduce duplication
f0ebac1c692a36e58203cefe633405f006190371 # scxctl: simplify string processing utility functions
17ab966550205e134954652602f34ab2c0bba7ee # scxctl: some Rust formatting changes to satisfy the CI
3ba0cabbfb1f679c48e9a8ad4ff3f0a58e3ebbfb # scx_loader: Add chaos scheduler
e7493df21a9c52caddee5f5dfd348c6c171b2671 # meson: install scx_mitosis and scx_wd40
773ce43e3ca0386917908c53cf8318652edc0f4d # scx_loader: Add mitosis scheduler
9450f0193025da420a570147ab473502c5c4ced9 # scx_loader: Add wd40 scheduler
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled \
    -D libbpf_a=disabled \
    -D bpftool=disabled \
    -D b_lto=true \
    -D b_lto_mode=thin \
    -D cargo_home="$srcdir"/scx
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
