# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r39.gdbc9abc0
pkgrel=3
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
349ab61e455f9783b1477d9cd443681f8e85bb0e # scx_rustland_core: Fix built-in idle CPU selection on older kernels
80bbb130e20a36e65a7d367bad2d109e2448c2ac # scx_rustland_core: Keep task on the same CPU when target CPU is invalid
4d81a8cb95f84335804e1aa8ef7827bea6b0e9ae # scx_rustland_core: Make select_cpu() optional
abd5bf5072be3d5c7a665d474590a03b94e4a5e5 # scx_rustland_core: Improve user-space scheduler synchronization
c0b3b4ac8509bdce01ee5ed5fcb5b60739338771 # scx_rustland_core: Detect dequeue events
41121f852862934f5173fabff2fd3ca515c1ef08 # scx_rustland_core: Always pick a valid idle CPU
0ee00f568d0e470c14e20457e3480a8a17799b25 # scx_rustland_core: Do not enqueue migration-disabled tasks
1c6d7ab2c46009e3b3085cee0fdac04579ceb3f6 # scx_rustland_core: Use a finite time slice for the user-space scheduler
34f8e6127a06f2f0d15424c1d4db091a0b21edf4 # scx_rustland: Dispatch more tasks as backlog increases
a2ceebdf33a1d6d322a34d688caaedc2ae8b9df9 # scx_rustland: Rework scheduling logic
9be253b93a7473a57f843eea14d48dba23b77e6e # scx_cosmos: Improve SMT handling
1da349846a5fc79e5268cee7747fdd5bb885a5c9 # scx_cosmos: Prioritize faster CPUs
cddeb9f9fb6b23b60d12467194d05f2781a89307 # scx_cosmos: Drop flat/preferred idle scan
a7ee021f4cc1ea3f6d8fada547d84644cbdb300e # scheds: Introduce scx_beerland
2094eaa5d4cbe8548a293371b1a0ea4dbe155a98 # scx_loader: Add beerland scheduler
e4540186be371c1368b4dc843cbc09e6c8a23c09 # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
e023d318faeedce209ed75cf1c80500de572f515 # scx_beerland: Better SMT handling
985234e6cd8331ad34a49d53b469b0468fbdd4bd # scx_beerland: Prevent migrations for non-overloaded CPUs
47aac4f92f7c1e7a45759c16c51c2cfd0cff597d # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
e11f160c5e6cd9c41fe1c40db477b00c10ea3f57 # scx_loader: Add chaos scheduler
54bbad536d8841da9066b82a19a6ce11eb4fabed # scx_loader: Error when non-auto modes do not have args
3f0bac1bf5fdf3cded7a5bdb3e95f12b2923a0ab # scxctl: Implement error handling
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
