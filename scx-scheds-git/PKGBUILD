# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.15.r288.g47d33ff7
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq' 'protobuf' 'libseccomp' 'bpf' 'libbpf')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")

_backports=(
e169ee978ad327d0c9e547b4cceddb38de6a3cff # scx_loader: Add chaos scheduler
d19cbe83c334eace042f632194ddf3f8ac2b0bd3 # meson: install scx_mitosis and scx_wd40
3b2537cdfacd0637258ca243e9558e731c4bb581 # scx_loader: Add mitosis scheduler
d38e514a6e3b62ad62516261887bfa951c6a3d10 # scx_loader: Add wd40 scheduler
13f8b3b854ab0707b0e5a8c8c6d8abe8e9632049 # scxctl: cache DBUS results to eliminate redundant calls
b43ab922ae13e72b05e97ff027be6ff60d7689c6 # scxctl: optimize scheduler list display with iterator patterns
f584b2609ddd0afe4b813f191fb5747c28703fab # scxctl: use &str parameters for string utility functions
0078ddb9772ec14a970511b6706a03e190f3f248 # scxctl: replace unwrap() calls with proper error handling
c04af2c4ef0e875596977cfc50ae8309ec9f903e # scxctl: extract helper functions to reduce duplication
fece4c1cb2a12aa19120716526282b394eb60218 # scxctl: simplify string processing utility functions
9d3f97173b211272a5c70971143bcdedfa5e9f08 # scxctl: some Rust formatting changes to satisfy the CI
5ee60e2f9dc0f9d85e31a18572d1f1052e34c863 # scx-scheds: drop scx.service
6a351e59eca1a6efedbabd02783b4c4bdab4bcf2 # scx-scheds: drop openrc support
6efefad97a94d3f3e0ef02d650dbe2e3b52d7e7c # scx-scheds: moving files to the services directory
8e25478b5d018de9a08eca039aef4ea10d17dd3f # scx_cargo: add specific crate for build time utilities
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D cargo_home="$srcdir"/scx \
    -D libbpf_a=disabled \
    -D bpftool=disabled \
    -D b_lto=true \
    -D b_lto_mode=thin
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
