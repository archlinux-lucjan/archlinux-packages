# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>
# Contributor: Tejun Heo <tj@kernel.org>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.17.r127.g5b66f94d
pkgrel=1
pkgdesc='sched_ext schedulers and tools'
url='https://github.com/sched-ext/scx'
arch=('x86_64')
license=('GPL-2.0-only')
depends=(
  jq
  libseccomp
  libelf
  zlib
)
makedepends=(
  cargo
  clang
  git
  llvm
  llvm-libs
  python
)
options=(!lto)
provides=("scx-scheds" "scxctl")
conflicts=("scx-scheds" "scxctl")
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')

_backports=(
8573e3f3a8ad101987baad69bce692f2e62fbf3f # scx_cosmos: Improve SMT handling
ac4672542e30204efe06fa0fb6a909a3c51f016e # scx_cosmos: Prioritize faster CPUs
055f37f21e797f93f5a28a2298f54fb58e67f02a # scx_cosmos: Drop flat/preferred idle scan
844a0af832fb277c6034089a1af1e92b0b826aa3 # scheds: Introduce scx_beerland
961f013fded794ff62c4f62bbf05b279b7177b4c # scx_loader: Add beerland scheduler
da1373683b540aa9f2f90a05b4d560fa2af1bab5 # EXPERIMENTAL: scx_beerland: Use lockless peek (requires kernel patch)
c408eee85d5387699f3136d2bd75d637b3b2a0f3 # scx_beerland: Better SMT handling
f69dec59ed772aee0407096cf52947074e65e078 # scx_beerland: Prevent migrations for non-overloaded CPUs
9463efb0d460fec0cbcf209a0ef6118c94da6390 # scx_beerland: Re-enqueue tasks on CPU preempted by a higher sched class
97dbd53f8c105ead0573b85c6b83aaee9d948e8e # scx_loader: Add chaos scheduler
6da5e902be160ec839d78f84c2bdca695e948e0c # scx_loader: Error when non-auto modes do not have args
5261ccb4b38426e94b94a7f063ee283cf474f774 # scxctl: Implement error handling
a50096b583fc61b676e254219218b708a3e105c7 # scx_rustland: Always dispatch one task at a time
d5f2cf4f1ca6b160814c667fad4926ca04156c7c # scx_rustland: Avoid over-penalizing newly created tasks
)

_reverts=(
)

pkgver() {
  cd $_gitname
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd $_gitname

  local _c _l
   for _c in "${_backports[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git cherry-pick --mainline 1 --no-commit "${_c}"
   done
   for _c in "${_reverts[@]}"; do
     if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
     git log --oneline "${_l}" "${_c}"
     git revert --mainline 1 --no-commit "${_c}"
   done

   export RUSTUP_TOOLCHAIN=stable
   cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
}

build() {
  cd $_gitname
  export RUSTUP_TOOLCHAIN=stable
  export CARGO_TARGET_DIR=target
  cargo build \
     --release \
     --frozen \
     --all-features \
     --workspace \
     --exclude scx_rlfifo \
     --exclude scx_mitosis \
     --exclude scx_wd40 \
     --exclude scxcash \
     --exclude xtask \
     --exclude vmlinux_docify \
     --exclude scx_arena_selftests
}

#check() {
#  cd $_gitname
#  export RUSTUP_TOOLCHAIN=stable
#  cargo test \
#     --frozen \
#     --all-features \
#     --workspace \
#     --exclude scx_rlfifo \
#     --exclude scx_mitosis \
#     --exclude scx_wd40 \
#     --exclude scxcash \
#     --exclude xtask \
#     --exclude vmlinux_docify \
#     --exclude scx_arena_selftests
#}

package() {
  cd $_gitname

  # Install all built executables (skip .so and .d files)
  find target/release \
    -maxdepth 1 -type f -executable ! -name '*.so' \
    -exec install -Dm755 -t "$pkgdir/usr/bin/" {} +

  # systemd service
  install -Dm644 services/systemd/scx_loader.service \
    -t "$pkgdir/usr/lib/systemd/system/"

  # D-Bus service
  install -Dm644 services/systemd/org.scx.Loader.service \
    -t "$pkgdir/usr/share/dbus-1/system-services/"

  # D-Bus configuration
  install -Dm644 tools/scx_loader/org.scx.Loader.conf \
    -t "$pkgdir/usr/share/dbus-1/system.d/"

  # scx_loader sample configuration (template)
  install -Dm644 services/scx_loader.toml \
    "$pkgdir/usr/share/scx_loader/config.toml"
}
