# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Maintainer: Piotr GÃ³rski <lucjan.lucjanov@gmail.com>

pkgname=scx-scheds-git
_gitname=scx
pkgver=1.0.5.r69.gd7576d4
pkgrel=4
pkgdesc='sched_ext schedulers and tools'
arch=('x86_64')
url="https://github.com/sched-ext/scx"
license=('GPL-2.0-only')
depends=('libelf' 'zlib' 'jq')
makedepends=('git' 'python' 'meson' 'clang' 'llvm' 'llvm-libs' 'rust')
backup=('etc/default/scx')
source=("git+https://github.com/sched-ext/scx")
sha256sums=('SKIP')
options=(!lto)
provides=("scx-scheds")
conflicts=("scx-scheds")

_backports=(
c8a920737149ed0882f35589f5e10794a6423d52 # scx_bpfland: prevent per-CPU DSQ stall with per-CPU kthreads
daa96dcd9dd922276ae57bc21f7ffbef42a5030b # WIP: scx_bpfland: handle user-space futex critical sections
9ea4b56ad679efa6ef813384d93d418dabc106e3 # scheds: introduce scx_fair
540c81b2f39044979a5f765c8cce09c77a54c7f5 # scx_fair: introduce lowlatency mode
1d146b20e61282eea165edc1d31e4c913f92ccb2 # scx_fair: use cast_mask() from common.bpf.h
2eee42b9cc8ec3047fa8a5292a4ec0ebb3c80f3d # scx_fair: always give tasks a chance to run on an idle CPU
cf582851a645fbfba19c2431d099ffe46694280f # scx_fair: introduce per-CPU DSQs
77a92c8bc42b1ad1527a756560d00d184532fe67 # scx_fair: apply minimum vruntime when task is dispatched
dc1da218567be96c81a9fcef1bc2b177c2880120 # scx_fair: do not scale the assigned time slice based on task priority
f3a0435a09153a87ba7d427f131ac690033f2d71 # scx_fair: make lowlatency default and drop it as an option
dfba810c3245a3f0f8bf7f4d9d60bad00e8e3baa # scx_fair: prevent per-CPU DSQ stall with per-CPU kthreads
77c15d72ed92f8f3d55d777fc278c679d93a4203 # WIP: scx_fair: handle user-space futex critical sections
)

_reverts=(
)

pkgver() {
  cd $_gitname
  # git describe
  git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g'
  # alternative
  # _ver="$(cat meson.build | grep -m1 version: | cut -d "'" -f2 | tr - .)"
  # echo "${_ver}.r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)"
}

prepare() {
 cd $_gitname

 local _c _l
  for _c in "${_backports[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git cherry-pick --mainline 1 --no-commit "${_c}"
  done
  for _c in "${_reverts[@]}"; do
    if [[ "${_c}" == *..* ]]; then _l='--reverse'; else _l='--max-count=1'; fi
    git log --oneline "${_l}" "${_c}"
    git revert --mainline 1 --no-commit "${_c}"
  done

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done
}

build() {
  cd $_gitname
  arch-meson . build -D openrc=disabled
  meson compile -C build
}

package() {
  cd $_gitname
  meson install -C build --destdir "${pkgdir}"
}
