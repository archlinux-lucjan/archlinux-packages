From cbd2b8bab8af8f58a49295456fe290a0b734aa8c Mon Sep 17 00:00:00 2001
From: Antheas Kapenekakis <lkml@antheas.dev>
Date: Sat, 5 Apr 2025 00:28:19 +0200
Subject: [PATCH 31/34] platform/x86: msi-wmi-platform: Add charge_threshold
 support

The battery of MSI laptops supports charge threshold. Add support for it.

Signed-off-by: Antheas Kapenekakis <lkml@antheas.dev>
---
 drivers/platform/x86/Kconfig            |   1 +
 drivers/platform/x86/msi-wmi-platform.c | 112 ++++++++++++++++++++++++
 2 files changed, 113 insertions(+)

diff --git a/drivers/platform/x86/Kconfig b/drivers/platform/x86/Kconfig
index 58d61d723..f7fbb289d 100644
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@ -727,6 +727,7 @@ config MSI_WMI
 
 config MSI_WMI_PLATFORM
 	tristate "MSI WMI Platform features"
+	depends on ACPI_BATTERY
 	depends on ACPI_WMI
 	depends on HWMON
 	select ACPI_PLATFORM_PROFILE
diff --git a/drivers/platform/x86/msi-wmi-platform.c b/drivers/platform/x86/msi-wmi-platform.c
index edb1adfe4..93ca416b3 100644
--- a/drivers/platform/x86/msi-wmi-platform.c
+++ b/drivers/platform/x86/msi-wmi-platform.c
@@ -30,6 +30,7 @@
 #include <linux/sysfs.h>
 #include <linux/types.h>
 #include <linux/wmi.h>
+#include <acpi/battery.h>
 
 #include <linux/unaligned.h>
 
@@ -74,6 +75,7 @@
 /* Get_Data() and Set_Data() Params */
 #define MSI_PLATFORM_PL1_ADDR	0x50
 #define MSI_PLATFORM_PL2_ADDR	0x51
+#define MSI_PLATFORM_BAT_ADDR	0xd7
 
 /* Get_WMI() WMI method */
 #define MSI_PLATFORM_WMI_MAJOR_OFFSET		1
@@ -117,6 +119,7 @@ enum msi_wmi_platform_method {
 
 struct msi_wmi_platform_quirk {
 	bool shift_mode;	/* Shift mode is supported */
+	bool charge_threshold;	/* Charge threshold is supported */
 	int pl_min;		/* Minimum PLx value */
 	int pl1_max;		/* Maximum PL1 value */
 	int pl2_max;		/* Maximum PL2 value */
@@ -126,6 +129,8 @@ struct msi_wmi_platform_data {
 	struct wmi_device *wdev;
 	struct msi_wmi_platform_quirk *quirks;
 	struct device *ppdev;
+	struct acpi_battery_hook battery_hook;
+	struct device_attribute battery_attr;
 	struct device *fw_attrs_dev;
 	struct kset *fw_attrs_kset;
 	struct mutex write_lock;
@@ -210,12 +215,14 @@ static const char * const msi_wmi_platform_debugfs_names[] = {
 static struct msi_wmi_platform_quirk quirk_default = {};
 static struct msi_wmi_platform_quirk quirk_gen1 = {
 	.shift_mode = true,
+	.charge_threshold = true,
 	.pl_min = 8,
 	.pl1_max = 43,
 	.pl2_max = 45
 };
 static struct msi_wmi_platform_quirk quirk_gen2 = {
 	.shift_mode = true,
+	.charge_threshold = true,
 	.pl_min = 8,
 	.pl1_max = 30,
 	.pl2_max = 37
@@ -996,6 +1003,91 @@ static int msi_wmi_fw_attrs_init(struct msi_wmi_platform_data *data)
 	return 0;
 }
 
+static ssize_t charge_control_end_threshold_store(struct device *dev,
+						  struct device_attribute *attr,
+						  const char *buf, size_t count)
+{
+	const struct msi_wmi_platform_data *data =
+		container_of(attr, struct msi_wmi_platform_data, battery_attr);
+	u8 buffer[32] = { 0 };
+	u32 val;
+	int ret;
+
+	ret = kstrtou32(buf, 10, &val);
+	if (ret)
+		return ret;
+
+	if (val > 100)
+		return -EINVAL;
+
+	buffer[0] = MSI_PLATFORM_BAT_ADDR;
+	buffer[1] = val | BIT(7);
+
+	ret = msi_wmi_platform_query(data->wdev, MSI_PLATFORM_SET_DATA, buffer,
+				     sizeof(buffer));
+	if (ret)
+		return ret;
+
+	return count;
+}
+
+static ssize_t charge_control_end_threshold_show(struct device *dev,
+						 struct device_attribute *attr,
+						 char *buf)
+{
+	const struct msi_wmi_platform_data *data =
+		container_of(attr, struct msi_wmi_platform_data, battery_attr);
+	u8 buffer[32] = { 0 };
+	u8 value;
+	int ret;
+
+	buffer[0] = MSI_PLATFORM_BAT_ADDR;
+
+	ret = msi_wmi_platform_query(data->wdev, MSI_PLATFORM_GET_DATA, buffer,
+				     sizeof(buffer));
+
+	if (ret)
+		return ret;
+
+	value = buffer[1] & ~BIT(7);
+
+	if (value > 100)
+		return -EIO;
+
+	return sysfs_emit(buf, "%d\n", value);
+}
+
+static int msi_platform_battery_add(struct power_supply *battery,
+			   struct acpi_battery_hook *hook)
+{
+	struct msi_wmi_platform_data *data = container_of(hook,
+						struct msi_wmi_platform_data, battery_hook);
+
+	/* MSI devices only have one battery. */
+	if (strcmp(battery->desc->name, "BAT0") != 0 &&
+	    strcmp(battery->desc->name, "BAT1") != 0 &&
+	    strcmp(battery->desc->name, "BATC") != 0 &&
+	    strcmp(battery->desc->name, "BATT") != 0)
+		return -ENODEV;
+
+	if (device_create_file(&battery->dev,
+			       &data->battery_attr))
+		return -ENODEV;
+
+	return 0;
+}
+
+static int msi_platform_battery_remove(struct power_supply *battery,
+			      struct acpi_battery_hook *hook)
+{
+	struct msi_wmi_platform_data *data = container_of(hook,
+						struct msi_wmi_platform_data, battery_hook);
+
+	device_remove_file(&battery->dev,
+			   &data->battery_attr);
+	return 0;
+}
+
 static ssize_t msi_wmi_platform_debugfs_write(struct file *fp, const char __user *input,
 					      size_t length, loff_t *offset)
 {
@@ -1226,6 +1318,17 @@ static int msi_wmi_platform_probe(struct wmi_device *wdev, const void *context)
 	ret = msi_wmi_fw_attrs_init(data);
 	if (ret < 0)
 		return ret;
+	
+	if (data->quirks->charge_threshold) {
+		data->battery_hook.name = "MSI Battery";
+		data->battery_hook.add_battery = msi_platform_battery_add;
+		data->battery_hook.remove_battery = msi_platform_battery_remove;
+		data->battery_attr.attr.name = "charge_control_end_threshold";
+		data->battery_attr.attr.mode = 0644;
+		data->battery_attr.show = charge_control_end_threshold_show;
+		data->battery_attr.store = charge_control_end_threshold_store;
+		battery_hook_register(&data->battery_hook);
+	}
 
 	msi_wmi_platform_profile_setup(data);
 
@@ -1234,6 +1337,14 @@ static int msi_wmi_platform_probe(struct wmi_device *wdev, const void *context)
 	return 0;
 }
 
+static void msi_wmi_platform_remove(struct wmi_device *wdev)
+{
+	struct msi_wmi_platform_data *data = dev_get_drvdata(&wdev->dev);
+	
+	if (data->quirks->charge_threshold)
+		battery_hook_unregister(&data->battery_hook);
+}
+
 static const struct wmi_device_id msi_wmi_platform_id_table[] = {
 	{ MSI_PLATFORM_GUID, NULL },
 	{ }
@@ -1247,6 +1358,7 @@ static struct wmi_driver msi_wmi_platform_driver = {
 	},
 	.id_table = msi_wmi_platform_id_table,
 	.probe = msi_wmi_platform_probe,
+	.remove = msi_wmi_platform_remove,
 	.no_singleton = true,
 };
 module_wmi_driver(msi_wmi_platform_driver);
-- 
2.49.0

